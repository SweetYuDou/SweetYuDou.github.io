<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RE-NET</title>
    <url>/2024/11/01/RE-Net/</url>
    <content><![CDATA[<h3 id="《Recurrent-Event-Network-Autoregressive-Structure-Inference-over-Temporal-Knowledge-Graphs》论文解读"><a href="#《Recurrent-Event-Network-Autoregressive-Structure-Inference-over-Temporal-Knowledge-Graphs》论文解读" class="headerlink" title="《Recurrent Event Network: Autoregressive Structure Inference over Temporal Knowledge Graphs》论文解读"></a>《Recurrent Event Network: Autoregressive Structure Inference over Temporal Knowledge Graphs》论文解读</h3><h4 id="RGCN"><a href="#RGCN" class="headerlink" title="RGCN"></a>RGCN</h4><p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238bf47b.png" alt="RGCN_formula"></p>
<p>W<sub>r</sub><sup>(l)</sup>是某一个特定的关系r（如弹劾，主动建交等）在第l层GCN中的权重矩阵，每一个不同的关系r对应其对应的权重矩阵，比如r<sub>1</sub>对应W<sub>1</sub>这样</p>
<p>h<sub>o</sub><sup>(l)</sup>是某一个特定的客体（object）在第l层GCN中的隐藏表示&#x2F;特征向量（hidden state&#x2F;embedding），也就是当前s实体所指向的那个o客体，<em><strong>h<sub>s</sub><sup>(l)</sup>同理</strong></em></p>
<p>W<sub>o</sub><sup>(l)</sup>是自环权重矩阵，意思就是它会与节点s自身的特征一直相乘然后更新到下一层再继续相乘</p>
<p>N<sub>t</sub><sup>(s,r)</sup>表示在时间戳t（timestamp）这个时间下的节点s通过关系r的邻居节点集合（Neighborhood），<em><strong>N<sub>t</sub><sup>(s)</sup>同理</strong></em></p>
<p>c<sub>s</sub>是归一化常数，体现在公式里就是：num(o) * num(r)，就是当前t的实体s对应的客体o的个数乘上当前t这个s对应的关系r的个数，包含了多少个邻居的信息就平均掉。<strong>简单来说，就是当前t的实体s的所有邻居个数</strong></p>
<p>RGCN聚合器的作用在于：聚合节点s的邻居节点的信息。结合公式解读一下就是：对于节点s，RGCN在更新节点特征同时考虑<strong>节点自身的特征</strong><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238ab7d7.png" alt="self_loop">和<strong>其邻居节点的特征</strong><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238b540f.png" alt="self_rel">，以及它们之间的关系类型（指不同关系对应不同权重矩阵)。</p>
<h4 id="RGCN模块代码如下："><a href="#RGCN模块代码如下：" class="headerlink" title="RGCN模块代码如下："></a>RGCN模块代码如下：</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RGCNLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_feat, out_feat, bias=<span class="literal">None</span>, activation=<span class="literal">None</span>, self_loop=<span class="literal">False</span>, dropout=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(RGCNLayer, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line">        <span class="variable language_">self</span>.activation = activation</span><br><span class="line">        <span class="variable language_">self</span>.self_loop = self_loop</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.bias:</span><br><span class="line">            <span class="variable language_">self</span>.bias = nn.Parameter(torch.Tensor(out_feat))</span><br><span class="line">            nn.init.xavier_uniform_(<span class="variable language_">self</span>.bias,  gain=nn.init.calculate_gain(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">            <span class="comment"># xavier_uniform_：初始化，用于保证输入输出的方差相同。可以避免随着层数的传递，输入过大而梯度消失或输入过小而失去非线性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 权重矩阵</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">            <span class="comment"># 回环权重矩阵</span></span><br><span class="line">            <span class="comment"># input_feature,output_feature</span></span><br><span class="line">            <span class="variable language_">self</span>.loop_weight = nn.Parameter(torch.Tensor(in_feat, out_feat))</span><br><span class="line">            nn.init.xavier_uniform_(<span class="variable language_">self</span>.loop_weight, gain=nn.init.calculate_gain(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dropout:</span><br><span class="line">            <span class="variable language_">self</span>.dropout = nn.Dropout(dropout)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.dropout = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">propagate</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            g是graph，.ndata[&#x27;h&#x27;]是PyTorch DGL图（Graph）对象的一个节点数据属性，它表示图中的节点特征向量。</span></span><br><span class="line"><span class="string">            在 GNNs 中，节点特征向量通常由两部分组成：一部分是静态的特征，如节点类别、属性等；</span></span><br><span class="line"><span class="string">            另一部分是动态的特征，如与节点相邻的节点数量、节点之间的边权重等。</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            loop_message = torch.mm(g.ndata[<span class="string">&#x27;h&#x27;</span>], <span class="variable language_">self</span>.loop_weight)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                loop_message = <span class="variable language_">self</span>.dropout(loop_message)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.propagate(g, reverse)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 应用bias偏移和激活函数</span></span><br><span class="line">        node_repr = g.ndata[<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.bias:</span><br><span class="line">            node_repr = node_repr + <span class="variable language_">self</span>.bias</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">            node_repr = node_repr + loop_message</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.activation:</span><br><span class="line">            node_repr = <span class="variable language_">self</span>.activation(node_repr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新节点特征向量</span></span><br><span class="line">        g.ndata[<span class="string">&#x27;h&#x27;</span>] = node_repr</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RGCNBlockLayer</span>(<span class="title class_ inherited__">RGCNLayer</span>):  <span class="comment"># RGCN块层</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_feat, out_feat, num_rels, num_bases, bias=<span class="literal">None</span>, activation=<span class="literal">None</span>, self_loop=<span class="literal">False</span>, dropout=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(RGCNBlockLayer, <span class="variable language_">self</span>).__init__(in_feat, </span><br><span class="line">                                             out_feat, </span><br><span class="line">                                             bias,</span><br><span class="line">                                             activation, </span><br><span class="line">                                             self_loop=self_loop,</span><br><span class="line">                                             dropout=dropout)</span><br><span class="line">        <span class="variable language_">self</span>.num_rels = num_rels</span><br><span class="line">        <span class="variable language_">self</span>.num_bases = num_bases</span><br><span class="line">        <span class="keyword">assert</span> <span class="variable language_">self</span>.num_bases &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.out_feat = out_feat</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.submat_in = in_feat // <span class="variable language_">self</span>.num_bases</span><br><span class="line">        <span class="variable language_">self</span>.submat_out = out_feat // <span class="variable language_">self</span>.num_bases</span><br><span class="line"></span><br><span class="line">        <span class="comment"># assuming in_feat and out_feat are both divisible by num_bases</span></span><br><span class="line">        <span class="comment"># if self.num_rels == 2:</span></span><br><span class="line">        <span class="comment">#     self.in_feat = in_feat</span></span><br><span class="line">        <span class="comment">#     self.weight = nn.Parameter(torch.Tensor(</span></span><br><span class="line">        <span class="comment">#         self.num_rels, in_feat, out_feat))</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="variable language_">self</span>.weight = nn.Parameter(torch.Tensor(<span class="variable language_">self</span>.num_rels, <span class="variable language_">self</span>.num_bases * <span class="variable language_">self</span>.submat_in * <span class="variable language_">self</span>.submat_out))</span><br><span class="line">        nn.init.xavier_uniform_(<span class="variable language_">self</span>.weight, gain=nn.init.calculate_gain(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msg_func</span>(<span class="params">self, edges, reverse</span>):  <span class="comment"># 节点和权重相乘，再转化为输出格式</span></span><br><span class="line">        <span class="keyword">if</span> reverse:</span><br><span class="line">            <span class="comment"># edges.data[&#x27;type_o&#x27;]：表示目标节点所属的关系的类型。具体哪个关系就对应它的权重矩阵</span></span><br><span class="line">            weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_o&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_s&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        edges.src[&#x27;h&#x27;]：表示源节点的特征向量。</span></span><br><span class="line"><span class="string">        它是一个大小为 (num_nodes, submat_in) 的tensor，其中 num_nodes 表示图中的节点数。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        node = edges.src[<span class="string">&#x27;h&#x27;</span>].view(-<span class="number">1</span>, <span class="number">1</span>, <span class="variable language_">self</span>.submat_in)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        msg：表示消息传递的结果。</span></span><br><span class="line"><span class="string">        它是一个大小为 (num_edges, out_feat) 的tensor，其中out_feat 表示输出特征向量的维度。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        msg = torch.bmm(node, weight).view(-<span class="number">1</span>, <span class="variable language_">self</span>.out_feat)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">propagate</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">        g.update_all(<span class="keyword">lambda</span> x: <span class="variable language_">self</span>.msg_func(x, reverse), fn.<span class="built_in">sum</span>(msg=<span class="string">&#x27;msg&#x27;</span>, out=<span class="string">&#x27;h&#x27;</span>), <span class="variable language_">self</span>.apply_func)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">apply_func</span>(<span class="params">self, nodes</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;h&#x27;</span>: nodes.data[<span class="string">&#x27;h&#x27;</span>] * nodes.data[<span class="string">&#x27;norm&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure></div>

<p>结合代码来看公式，是<img lazyload src="/images/loading.svg" data-src="/RE-Net/67376238ab7d7.png" alt="self_loop"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">   		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         先让节点特征向量与自环权重矩阵相乘+dropout</span></span><br><span class="line"><span class="string">         &#x27;&#x27;&#x27;</span></span><br><span class="line">loop_message = torch.mm(g.ndata[<span class="string">&#x27;h&#x27;</span>], <span class="variable language_">self</span>.loop_weight)</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             loop_message = <span class="variable language_">self</span>.dropout(loop_message)</span><br><span class="line">         <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         再把偏移、乘积、激活函数加在原有的节点特征向量上</span></span><br><span class="line"><span class="string">         允许每一层都保留前一层的信息，有点像ResNet的思想</span></span><br><span class="line"><span class="string">         &#x27;&#x27;&#x27;</span></span><br><span class="line">	node_repr = g.ndata[<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.bias:</span><br><span class="line">             node_repr = node_repr + <span class="variable language_">self</span>.bias</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">             node_repr = node_repr + loop_message</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.activation:</span><br><span class="line">             node_repr = <span class="variable language_">self</span>.activation(node_repr)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">把最后的节点表示（node_repr）作为该层节点特征向量的输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">         g.ndata[<span class="string">&#x27;h&#x27;</span>] = node_repr</span><br><span class="line">         <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/RE-Net/67376238b540f.png" alt="self_rel">是</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">def</span> <span class="title function_">msg_func</span>(<span class="params">self, edges, reverse</span>): </span><br><span class="line">      <span class="keyword">if</span> reverse:</span><br><span class="line">          weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_o&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_s&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">先找到目标节点所属的关系的类型（比如：弹劾、被弹劾；选举、被选举）</span></span><br><span class="line"><span class="string">拿到该关系所对应的权重矩阵</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">      node = edges.src[<span class="string">&#x27;h&#x27;</span>].view(-<span class="number">1</span>, <span class="number">1</span>, <span class="variable language_">self</span>.submat_in)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">将源节点的特征向量与权重相乘</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">      msg = torch.bmm(node, weight).view(-<span class="number">1</span>, <span class="variable language_">self</span>.out_feat)</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">propagate</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">      g.update_all(<span class="keyword">lambda</span> x: <span class="variable language_">self</span>.msg_func(x, reverse), fn.<span class="built_in">sum</span>(msg=<span class="string">&#x27;msg&#x27;</span>, out=<span class="string">&#x27;h&#x27;</span>), <span class="variable language_">self</span>.apply_func)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">把该源节点的所有邻居节点的msg结果相加聚合</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">apply_func</span>(<span class="params">self, nodes</span>):</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="string">&#x27;h&#x27;</span>: nodes.data[<span class="string">&#x27;h&#x27;</span>] * nodes.data[<span class="string">&#x27;norm&#x27;</span>]&#125;</span><br><span class="line">  	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  	最后乘上归一化常数nodes.data[&#x27;norm&#x27;]</span></span><br><span class="line"><span class="string">  	&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>RGCN捕捉多跳邻居的信息：通过多次应用图卷积操作实现</p>
<ul>
<li>在第一次迭代中，每个节点聚合来自其直接邻居的信息</li>
<li>在第二次迭代中，每个节点合来自其邻居的邻居（即第二跳邻居）的信息</li>
</ul>
<h4 id="RE-Net架构图解读"><a href="#RE-Net架构图解读" class="headerlink" title="RE-Net架构图解读"></a>RE-Net架构图解读</h4><p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238ebfd3.png" alt="RE-Net_architecture"></p>
<p>任务：预测时间戳t中的三元组</p>
<p>已知：过去几个时间步的图（架构图举例为3个时间步）</p>
<p>RE-Net_global对整个知识图谱（能观察到的图，架构图中整个图谱为3个时间步的图）进行编码，给出全局嵌入表示（global_emb）。在预测时给出预测时间戳t的主体、客体分布以及更新后的全局嵌入表示</p>
<p>RE-Net(train)：将可观察到的局部图中的s,r和global_emb等放入Aggregator聚合器（RGCN）当中，聚合器的输出结果为两个序列s_packed_input,s_packed_input_r分别放入encoder,encoder_r中，编码实体表示和关系表示，RE-Net类的self.encoder被定义为nn.GRU，最后分别送入线性层self.linear,self.linear_r(nn.linear)和dropout层预测客体和关系并分别计算损失</p>
<p>RE-Net(valid,test)：RE-Net_global预测时间戳t的主体，客体分布后采样前self.num_k个，更新（主体和客体的列表、索引、历史交互缓存），构建新的时间点的图，更新图字典（graph_dict）和全局嵌入表示（global_emb）。再重复以上操作↑</p>
]]></content>
      <categories>
        <category>deep-learning</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2024/11/14/Docker/</url>
    <content><![CDATA[<ul>
<li>docker镜像源（加速地址）是国内的源来拉镜像，可能有一些镜像没有，代理就是从Dockerhub拉。<strong>你拉的镜像如果是<em>Dockerhub</em>的，并且国内镜像源没有，那镜像源也不好使，只能老老实实配好代理</strong>。阿里云ECS可以使用阿里云镜像加速器，<code>/etc/docker/daemon.json</code>如下配置即可，不要加其他源：</li>
</ul>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://***.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>本地访问阿里云ECS的网页时，若出现无法访问的问题，可以检查该ECS配置的安全组是否开放HTTP（80）、HTTPS（443）端口。</li>
<li>用clash来给服务器<strong>配置代理</strong>，可以参考<a class="link" href="https://github.com/nelvko/clash-for-linux-install?tab=readme-ov-file">nelvko&#x2F;clash-for-linux-install: 优雅地部署基于 Clash 的代理环境 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，其中订阅就是一个链接，可以从机场网站上找，类似这样的：</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/673762390d8ea.png" alt="subscription"></p>
<p>我这里用的是clash，就复制clash订阅链接就好了。部署完clash后，服务器开放端口7890作为代理接口，来访问代理服务器。在服务器终端设置相关环境变量：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 </span><br></pre></td></tr></table></figure></div>

<p>由于配置代理是为了docker服务，所以还要编辑Docker系统的服务配置文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure></div>

<p>在proxy.conf中配置以下内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://127.0.0.1:7890&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>最后重启docker：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<p>不出意外应该成功了，可以尝试拉取一些之前拉取失败的镜像来验证一下</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/20/673d70d56e2f1.png" alt="traffic"></p>
<ul>
<li>阿里云云数据传输的流量<strong>按量计算，两天就花了151.05CNY…TuT</strong>，目录价因子都是流出地域，我用Xftp7把ECS上的文件传到本地也用不到100多个G吧？暂时还没想到是为什么，只好先暂停服务了</li>
</ul>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>学习笔记</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记</title>
    <url>/2024/11/16/Maven/</url>
    <content><![CDATA[<ul>
<li>Maven远程仓库默认为Maven Central Repository，可以在<code>/conf/settings.xml</code>中配置远程镜像仓库为国内阿里云镜像仓库，提高Jar包下载的速度和稳定性。配置settings.xml完成后保存退出。</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"># 在settings.xml 160行处添加镜像源，需要保证镜像源标签在mirror的第一个</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/16/67377c04abc81.png" alt="image-20241116005159364">像这样，镜像源得在前，否则会报错</p>
<ul>
<li>IntelliJ IDEA中项目代码若出现无法解析符号“xxx”报错且鼠标指针移到报错的符号（被高亮为红色）上没有提示”导入类’xxx‘时“，可以尝试点击右侧”更多操作“</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/25/6743503f889cd.png" alt="更多操作"></p>
<p>点击“添加Maven依赖项”</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/25/6743503f852b2.png" alt="添加Maven依赖项"></p>
<p>再选择合适的版本</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/25/6743503f5ecf4.png" alt="选择合适版本"></p>
<p>最后再导入类，即可解决报错</p>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>学习笔记</tag>
        <tag>Spring Boot</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>对FPS游戏作弊工具的一些理解</title>
    <url>/2024/11/25/DMA/</url>
    <content><![CDATA[<p>​	这两天看到了个几张图片，据说是超越了DMA的作弊工具，看完后心血来潮想研究一下现在的一些游戏外挂的原理。</p>
<ul>
<li>首先是普通外挂软件。游戏数据大部分都存在本地内存中，比如敌人位置、血量、技能等。正常情况下你肯定看不到，但外挂软件直接访问本地内存，并将这些数据可视化。比如一些透视挂，就可以通过从本地内存中读取的数据来显示敌人所在位置等信息。游戏通常会拒绝这些外挂软件访问游戏数据，稍微好一点的外挂软件就会伪装成各种正规的软件来访问，但这种普通的内存挂基本都会封，只是时间问题而已</li>
<li>而DMA可以优化这一点。DMA全称为Direct Memory Access，即直接存储器访问。DMA能够做到<strong>在数据传输期间</strong>越过CPU来访问内存，那么就可以通过DMA把本地电脑的内存复制一份到另一台电脑上，然后在另一台电脑上运行外挂软件来实现外挂功能（如透视），而外挂软件完全不访问运行在本地的游戏数据，所以很难封禁。但是由于现代操作系统（如 Windows、Linux 等）都有复杂的内存管理机制。操作系统会对内存进行虚拟化，将物理内存映射到不同的虚拟地址空间。对于 DMA 访问内存，<strong>DMA需要CPU去解析内存再传输给DMA</strong>，它不能直接使用物理内存地址，因为操作系统可能已经对这些物理地址进行了重新映射。如果直接使用物理地址访问内存，可能会访问到错误的区域，因为它不知道操作系统的内存映射规则。因此DMA虽然可以避开CPU，但绕不过操作系统，存在被操作系统检测到的可能</li>
<li>于是现在又有了HMTT来进一步优化。HMTT全称为Hybrid Memory Trace Tool，即混合内存跟踪工具。HMTT通过插在DDR4接口的内存上，使用DIMM-snooping机制监听内存总线，绕开了CPU。HMTT在读取内存时<strong>系统内部没有任何痕迹</strong>，可以理解为内存中间人，可以在数据从一个地方传输到另一个地方的过程中介入并获取数据。因此HMTT也可以在将内存数据发送给主板前复制一份给另一台电脑，且无法被操作系统检测到。HMTT是纯物理层面的解决方案，不经过操作系统，因此不存在操作系统层面的检测可能╮(╯▽╰)╭</li>
</ul>
<p>将来问世的各种硬件各种技术难免会被用在研发外挂上，这是不可避免的。在我看来，其实DMA就已经很难查封了，没必要因为新的外挂技术而沮丧，反正反作弊都查不出来🤣🤣🤣</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/26/6744b13a9bc43.jpg"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/26/6744b13a9ed3e.jpg"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/26/6744b13aa23bb.jpg"></p>
<p>这三张图是我在冲浪时看到的，值得一提的是：第一张图提到的DMA和HMTT的区别是有误的，DMA不需要通过CPU来访问内存，第二张图“DMA获取内存的方式”也是错的，不知道是不是为了销售故意这样做的😏</p>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>DMA</tag>
        <tag>HMTT</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN等网络优化工具的一些理解</title>
    <url>/2024/11/30/vpn/</url>
    <content><![CDATA[<ul>
<li>VPN全称”Virtual Private Network”，也就是虚拟专用网络。VPN提供安全的远程访问和隐私保护，通过建立的“虚拟隧道”在公网上传输，就像是把你的数据包裹在一个新的 “信封” 里，这个 “信封” 在公网上传输，到达目的地后再把原始数据解封装。</li>
</ul>
<p>​	用户使用VPN访问的流程为：</p>
<ol>
<li><p>用户先通过VPN客户端软件连接到VPN服务器</p>
</li>
<li><p>用户的所有网络流量都会通过VPN服务器转发</p>
</li>
<li><p>VPN服务器会对用户的网络数据进行加密,确保传输过程的安全性</p>
</li>
<li><p>用户的IP地址也会被VPN服务器的IP地址所替换,从而隐藏了用户的真实IP</p>
<p>所以在我们使用VPN进行翻墙的时候，例如使用了美国节点，那么访问YouTube时就是以美国节点的IP进行访问。而整个过程由于VPN的加密，防火墙不知道你访问了什么，因此无法进行屏蔽，保障访问过程的顺利进行。</p>
</li>
</ol>
<ul>
<li>游戏加速器的原理是：通过优化路由，减少网络拥堵等来优化服务器连接。游戏加速器通常会有自己的网络节点，这些节点分布在不同地区，靠近游戏服务器。它会根据你的位置和游戏服务器位置，选择最优的网络传输路径。例如，它可能会利用一些专用的网络线路或者优化网络协议，将你的游戏数据通过这些优化后的路径进行传输。加速器会对游戏数据包进行识别和优先处理，有点像为游戏数据开辟了一条 “绿色通道”，使游戏数据能够更快地传输。</li>
<li>个人理解：比如在访问外网时，VPN服务器可以看成一种连接更加稳定且更安全的代理服务器。就像clash中可以设置全局代理和智能代理一样，前者是将所有网络请求都通过代理服务器，而后者会根据你设置的规则等进行选择性地代理。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/vpn/67691fc6b28bf.png" alt="image-20241223163112150"></p>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>系统中间件与云虚拟化实践</title>
    <url>/2025/01/13/yjs/</url>
    <content><![CDATA[<h3 id="1-基于阿里云云效Codeup的Git代码管理"><a href="#1-基于阿里云云效Codeup的Git代码管理" class="headerlink" title="1. 基于阿里云云效Codeup的Git代码管理"></a>1. 基于阿里云云效Codeup的Git代码管理</h3><h4 id="1-1-实验目标与相关知识技能"><a href="#1-1-实验目标与相关知识技能" class="headerlink" title="1.1 实验目标与相关知识技能"></a>1.1 <strong>实验目标与相关知识技能</strong></h4><p>•     了解Git常用指令及其基本原理，如：git push,git pull,git init,git add,git config,git branch,git commit等</p>
<p>•     了解一些常见的Linux系统命令，如：cd,cat,touch等</p>
<p>•     学会使用ssh方式访问仓库，减少不必要的交互以提高效率</p>
<h4 id="1-2-实验步骤与对应成果展示"><a href="#1-2-实验步骤与对应成果展示" class="headerlink" title="1.2 实验步骤与对应成果展示"></a>1.2 <strong>实验步骤与对应成果展示</strong></h4><p>​	创建test.py文件，暂存至暂存区后观察文件状态，提交至本地仓库后观察文件状态，推送至远程仓库并观察文件状态</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &quot;import json&quot; &gt; test.py  #创建test.py</span><br><span class="line">git add test.py  #暂存test.py</span><br><span class="line">git status  #观察文件状态</span><br><span class="line">git commit -m &quot;feat(test.py):引入json&quot;  #提交至本地仓库</span><br><span class="line">git status  #观察文件状态</span><br><span class="line">git push origin master  #推送至远程仓库</span><br><span class="line">git status  #观察文件状态</span><br></pre></td></tr></table></figure></div>

<p>​	至此，已完成暂存、提交、推送三个基本操作，本地代码已同步至云端Codeup</p>
<p>​	修改test.py文件后观察文件状态，暂存修改后的文件并观察文件状态，添加<code>&quot;import re&quot;</code>至<code>test.py</code>中，观察文件状态，提交至本地仓库后观察文件状态，推送至云端仓库后观察文件状态，查看历史提交记录</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &quot;import random&quot; &gt; test.py  #修正test.py</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git status</span><br><span class="line"><span class="built_in">echo</span> &quot;import re&quot; &gt;&gt; test.py</span><br><span class="line">git status</span><br><span class="line">git commit -a -m &quot;feat(test.py)：引入random，re&quot;</span><br><span class="line">git status</span><br><span class="line">git push</span><br><span class="line">git status</span><br><span class="line">git log  #git log用于查看历史提交记录 </span><br></pre></td></tr></table></figure></div>

<p>​	修改<code>test.py</code>，暂存文件<code>test.py</code>，取消暂存<code>test.py</code>，提交至本地仓库，撤销提交，再次提交至本地仓库，推送至云端仓库，本地回滚后再次强行推送至远程仓库，期间不断<code>git status</code>观察文件状态</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &quot;<span class="built_in">print</span>(&#x27;Hello world&#x27;)&quot; &gt;&gt; test.py</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> --staged test.py  #将本地仓库HEAD指向的版本复制到暂存区</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git reset HEAD test.py</span><br><span class="line">git commit -m &quot;feat(test.py)：打印Hello World&quot;</span><br><span class="line">git status</span><br><span class="line">git reset HEAD~  #HEAD~是HEAD的父节点，设置HEAD指向当前提交的上一次提交</span><br><span class="line">git status</span><br><span class="line">git commit -a -m &quot;feat(test.py)：打印Hello World&quot;</span><br><span class="line">git push origin master</span><br><span class="line">git reset HEAD~</span><br><span class="line">git push -f origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>​	取消对<code>test.py</code>的跟踪并恢复，与最近一次修改前的<code>test.py</code>进行比较，暂存<code>test.py</code>至暂存区，删除<code>test.py</code>，查看<code>test.py</code>的内容，从暂存区中恢复<code>test.py</code>，查看test.py内容，删除<code>test.py</code>，再强制删除已暂存的<code>test.py</code>，尝试恢复被删除的文件，查看<code>test.py</code>是否被恢复，从暂存区中恢复<code>test.py</code>，查看<code>test.py</code>的内容</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">Plain Text</span><br><span class="line">git rm --cached test.py  #取消对test.py的跟踪</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git diff test.py</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git status</span><br><span class="line">rm test.py  #删除test.py</span><br><span class="line">cat test.py  #在终端中打印test.py的内容</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> test.py</span><br><span class="line">cat test.py</span><br><span class="line">git status</span><br><span class="line">git rm test.py</span><br><span class="line">git rm -f test.py</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> test.py</span><br><span class="line">git <span class="built_in">restore</span> --staged test.py</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> test.py</span><br><span class="line">cat test.py</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6783edb9378ba.png" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6783edb8d428c.png" alt="img"></p>
<h4 id="1-3-遇到的主要问题、解决思路和收获"><a href="#1-3-遇到的主要问题、解决思路和收获" class="headerlink" title="1.3 遇到的主要问题、解决思路和收获"></a>1.3 <strong>遇到的主要问题、解决思路和收获</strong></h4><p>​	该实验暂未遇到问题</p>
<h3 id="2-基于阿里云-ECS-与-ACR-的容器镜像管理"><a href="#2-基于阿里云-ECS-与-ACR-的容器镜像管理" class="headerlink" title="2. 基于阿里云 ECS 与 ACR 的容器镜像管理"></a>2. 基于阿里云 ECS 与 ACR 的容器镜像管理</h3><h4 id="2-1-实验目标与相关知识技能"><a href="#2-1-实验目标与相关知识技能" class="headerlink" title="2.1 实验目标与相关知识技能"></a>2.1 实验目标与相关知识技能</h4><p>•     掌握ECS的基本操作，能较为熟练地使用Linux平台，如ECS远程连接，Xftp 7传输文件等</p>
<p>•     掌握Docker的常用命令，包括拉取镜像，启动容器，查看镜像，删除镜像，暂停容器等</p>
<p>•     学会撰写Dockerfile文件来构建镜像，并基于阿里云ACR完成镜像的pull和push</p>
<h4 id="2-2-实验步骤与对应成果展示"><a href="#2-2-实验步骤与对应成果展示" class="headerlink" title="2.2 实验步骤与对应成果展示"></a>2.2 实验步骤与对应成果展示</h4><p>​	使用<code>docker pull</code>拉取<code>nginx</code>镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker images</code>查看已拉取的镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker run</code>运行<code>docker</code>容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用docker ps查看当前运行的容器信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps  </span><br></pre></td></tr></table></figure></div>

<p>​	此时可用本地浏览器访问该ECS服务器公网，即<code>http://&lt;ECS公网IP&gt;</code>以此验证容器是否正常运行</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6785313586e43.jpg" alt="img"></p>
<p>​	将Nginx服务的配置文件、日志文件及Web服务的根目录分别建立持久化映射，可以理解为让容器中的目录与宿主目录进行同步</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nginx/html</span><br><span class="line"><span class="comment"># -p --parents：如果路径中任意一级父目录不存在，则创建</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /opt/docker/nginx/</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d /opt/docker/nginx/</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /opt/docker/nginx/</span><br></pre></td></tr></table></figure></div>

<p>​	现在要想Nginx服务使用持久化存储的数据，需要先停止再删除当前运行的nginx容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line">docker ps -a <span class="comment">#观察是否删除成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	重新执行<code>docker run</code>，同时配置好相关参数</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -v, --volume list：挂在目录，&lt;宿主目录&gt;:&lt;容器目录&gt;</span></span><br><span class="line">docker run -d --restart=always \</span><br><span class="line">            --name nginx \</span><br><span class="line">            -p 80:80 \</span><br><span class="line">            -v /opt/docker/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">            -v /opt/docker/nginx/html:/usr/share/nginx/html \</span><br><span class="line">            -v /opt/docker/nginx/logs:/var/log/nginx \</span><br><span class="line">            nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker stop</code>,<code>docker start</code>进行练习</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker start nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>curl</code>命令获取网页内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:80  <span class="comment">#在ECS终端上输入，所以地址是127.0.0.1</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker exec</code>命令进入容器。该命令定义为在容器内部运行一条指定命令，可以指定命令为Shell程序，如<code>/bin/bash</code>，配合参数<code>-it</code>，可以实现进入容器进行命令行交互式操作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx /bin/bash</span><br><span class="line"><span class="comment"># -i --interactive，保持交互模式</span></span><br><span class="line"><span class="comment"># -t --tty，分配一个伪终端（模拟终端）</span></span><br><span class="line"><span class="comment"># nginx，容器名称</span></span><br><span class="line"><span class="comment"># /bin/bash，待执行的命令，进入bash shell</span></span><br></pre></td></tr></table></figure></div>

<p>​	进入容器后，在nginx服务的Web服务的根目录中创建<code>test.html</code>文件。由于容器本身不支持<code>vim</code>，因此用<code>echo</code>命令进行编写，最后用<code>exit</code>命令退出容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;Hello,world&lt;/h1&gt;&quot;</span> &gt; test.html</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">ls</span> /opt/docker/nginx/html  <span class="comment">#查看是否成功持久化储存到宿主系统</span></span><br><span class="line">curl 127.0.0.1:80/test.html  </span><br></pre></td></tr></table></figure></div>

<p>​	除了curl命令，一样可以用浏览器访问<code>http://&lt;ECS公网地址&gt;/test.html</code>来验证</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6785313522372.jpg" alt="img"></p>
<p>​	使用<code>docker logs</code>查看容器日志，可以通过此方法来判断容器是否正常工作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>dcoker rmi</code>删除不必要的容器镜像时，要先删除使用该镜像的容器，想删除容器又得先停止容器实例运行。故删除镜像的顺序如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line">docker rmi nginx</span><br><span class="line">docker images  <span class="comment">#判断镜像是否删除成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	构建Docker容器镜像可以通过编写并运行Dockerfile文件来实现，一般而言，Dockerfile的文件指令逻辑应按照以下模式建立：选择合适的基础镜像、安装基础工具与依赖、添加其他应用、清理缓存、声明镜像端口暴露情况、设置默认启动命令</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Ubuntu作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;&lt;yud0u@qq.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx及Python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    nginx \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-distutils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理apt软件包缓存    </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">[<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用docker build命令创建容器镜像（最好在Dockerfile同一目录下运行）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -t, tag：镜像名称（REPOSITORY：TAG）</span></span><br><span class="line"><span class="comment"># npu：Nginx Python Ubuntu，自定义镜像名称</span></span><br><span class="line"><span class="comment"># .：PATH，执行命令的上下文路径，构造过程中可以引用该上下文中的任何文件</span></span><br><span class="line">docker build -t npu .</span><br><span class="line">docker images  <span class="comment">#查看镜像是否创建成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	运行该镜像，检测Nginx服务；进入容器后检测Python解析能力</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name npu -p 80:80 npu</span><br><span class="line">curl 127.0.0.1</span><br><span class="line">docker <span class="built_in">exec</span> -it npu /bin/bash</span><br><span class="line">(nginx)python3</span><br><span class="line"><span class="built_in">exit</span>()</span><br><span class="line">(nginx)<span class="built_in">exit</span></span><br></pre></td></tr></table></figure></div>

<p>​	将创建的npu镜像推送至ACR，在此之前先在ACR控制台创建镜像仓库<code>npu</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker login --username=鱼豆YuDou crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com</span><br><span class="line">docker tag [ImageId] crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:[镜像版本号]</span><br><span class="line">docker push crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	推送成功后可以在该镜像仓库中查看提交记录</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/678531347f773.jpg" alt="img"></p>
<p>​	从ACR中拉取容器镜像进行测试，需要先删除本地容器及其镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop npu</span><br><span class="line">docker <span class="built_in">rm</span> npu</span><br><span class="line">docker rmi npu</span><br><span class="line">docker rmi crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu</span><br><span class="line">docker images  <span class="comment">#查看镜像是否删除成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	删除后再进行拉取操作，并进行测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:latest</span><br><span class="line">docker run -d --name npu -p 80:80 crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:latest</span><br><span class="line">curl 127.0.0.1  <span class="comment">#查看容器是否正常运行</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-4-遇到的主要问题、解决思路和收获"><a href="#2-4-遇到的主要问题、解决思路和收获" class="headerlink" title="2.4 遇到的主要问题、解决思路和收获"></a>2.4 遇到的主要问题、解决思路和收获</h4><p>​	<strong>（✅）本实验遇到的最大问题为：docker拉取镜像超时。</strong></p>
<p>​	为解决此问题，共尝试了三种方法：</p>
<ol>
<li>（❌）在<code>/etc/docker/daemon.json</code>下配置docker镜像源，包括各种华为云等镜像源，配置方法参考以下链接<a class="link" href="https://blog.csdn.net/weixin_50160384/article/details/139861337%EF%BC%8C%E4%BD%86%E5%9D%87%E4%BB%A5%E5%A4%B1%E8%B4%A5%E5%91%8A%E7%BB%88">https://blog.csdn.net/weixin_50160384/article/details/139861337，但均以失败告终 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>（❌）在<code>/etc/docker/daemon.json</code>下配置阿里云镜像加速器，在ACR中获取加速器地址，并按如下方式配置，不添加其他镜像源，但效果并不稳定，有时可以拉取成功有时又不行</li>
</ol>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://***.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/67853134866b3.png" alt="image-20250113233043464"></p>
<ol start="3">
<li>（✅）为ECS服务器配置代理，在网上阅读了许多文章后，我将具体方法总结在我的个人博客上：<a class="link" href="https://sweetyudou.github.io/2024/11/14/Docker/%E3%80%82%E7%AE%80%E8%80%8C%E8%A8%80%E4%B9%8B%EF%BC%8C%E6%88%91%E4%BD%BF%E7%94%A8clash%E6%88%90%E5%8A%9F%E4%B8%BAECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%88%90%E5%8A%9F%E5%81%9A%E5%88%B0%E4%BA%86%E7%A8%B3%E5%AE%9A%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%EF%BC%8C%E6%98%AF%E4%B8%80%E5%8A%B3%E6%B0%B8%E9%80%B8%E7%9A%84%E5%A5%BD%E6%96%B9%E6%B3%95">https://sweetyudou.github.io/2024/11/14/Docker/。简而言之，我使用clash成功为ECS服务器配置代理，并且成功做到了稳定拉取镜像，是一劳永逸的好方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<h3 id="3-基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问"><a href="#3-基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问" class="headerlink" title="3. 基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问"></a>3. 基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问</h3><h4 id="3-1-实验目标与相关知识技能"><a href="#3-1-实验目标与相关知识技能" class="headerlink" title="3.1 实验目标与相关知识技能"></a>3.1 实验目标与相关知识技能</h4><p>•     掌握Dockerfile构建容器镜像</p>
<p>•     理解HTTP协议基本概念，掌握HTTP调试工具的使用</p>
<p>•     理解网络服务API的概念，学会HTTP RESTful API的使用</p>
<p>•     理解并掌握Python Requests</p>
<h4 id="3-2-实验步骤与对应成果展示"><a href="#3-2-实验步骤与对应成果展示" class="headerlink" title="3.2 实验步骤与对应成果展示"></a>3.2 实验步骤与对应成果展示</h4><p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/exp_pyms_api_demo">exp_pyms_api_demo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	在ACR中创建镜像仓库，以备后续的镜像上传</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866bd496fbd.png" alt="img"></p>
<p>​	启动本实验提供的微服务范例，体验HTTP RESTful API接口，本服务范例在8000端口监听，启动命令为：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./exp_pyms_api_demo ./device.csv</span><br><span class="line"><span class="comment"># ./exp_pyms_api_demo &lt;csv_file&gt;,csv_file为存储设备信息的CSV文件路径。若该路径中存在CSV文件则读取信息，否则自动创建5条设备信息并生成CSV文件</span></span><br></pre></td></tr></table></figure></div>

<p>​	此时访问<code>http://&lt;IP&gt;:8000/docs</code>将会看到以下页面：</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866aeab506c.png" alt="image-20250114213605484"></p>
<p>​	此时当前目录创建<code>device.csv</code>文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -F  <span class="comment">#查看是否创建device.csv文件</span></span><br></pre></td></tr></table></figure></div>

<p>​	<code>Ctrl + C</code>退出程序后，创建Dockerfile文件</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Ubuntu 22.04 作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;&lt;yud0u@qq.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作目录为 /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="comment">#将主机文件系统中的 exp_pyms_api_demo 复制到镜像中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> exp_pyms_api_demo exp_pyms_api_demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露服务端口 8000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器的启动命令，devcie.csv 将存储在容器的/var/lib/exp_pyms_data/ 目录下，因此该目录应持久化</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/app/exp_pyms_api_demo&quot;</span>, <span class="string">&quot;/var/lib/exp_pyms_data/device.csv&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker build</code>命令构建容器镜像，镜像名为<code>exp_pyms_api_demo:1.0</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t exp_pyms_api_demo:1.0 .</span><br><span class="line">docker images  <span class="comment">#查看镜像是否构建成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	将镜像上传至ACR镜像仓库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker login --username=鱼豆YuDou crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com</span><br><span class="line">docker tag [ImageId] crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:[镜像版本号]</span><br><span class="line">docker push crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	推送成功后，可在镜像仓库exp_pyms_api_demo的页面中查看刚刚推送的镜像</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866aedac18f.gif" alt="img"></p>
<p>​	远程登录ECS并拉取镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	在ECS工作目录创建持久化目录exp_pyms_data，用于存储容器内服务生成的业务数据文档，即设备信息数据，随后运行该镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> exp_pyms_data</span><br><span class="line">docker run -d --restart=always\</span><br><span class="line">            --name exp_pyms_api_demo \</span><br><span class="line">            -v ./exp_pyms_data/:/var/lib/exp_pyms_data/ \</span><br><span class="line">            -p 8000:8000 \</span><br><span class="line">            crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:1.0</span><br></pre></td></tr></table></figure></div>

<p>​	使用docker logs查看服务是否成功启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs exp_pyms_api_demo  </span><br><span class="line"><span class="built_in">ls</span> exp_pyms_data/  <span class="comment">#若有device.csv文件，则成功创建5条设备信息且服务成功运行</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用OpenAPI查看微服务接口，在浏览器中通过<code>&lt;ecs_ip&gt;:8000/docs</code>来访问<code>Redocly</code>文档地址</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866ae867e7a.jpg" alt="img"></p>
<p>​	同理，本实验Swagger文档地址为<code>&lt;ecs_ip&gt;:8000/docs/swagger</code></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866ae9278db.jpg" alt="img"></p>
<p>​	配置Python虚拟环境<code>exp_venv</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m venv exp_venv</span><br><span class="line"><span class="built_in">source</span> exp_venv/bin/activate</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure></div>

<p>​	进入Python交互式界面进行初步验证</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">import requests  <span class="comment">#验证requests库是否可导入</span></span><br><span class="line">requests.__version__  <span class="comment">#查看requests版本</span></span><br><span class="line"><span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure></div>

<p>​	查看先前生成的device.csv文件内容，通过Requests库访问接口来获取设备信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv</span><br><span class="line">python3</span><br><span class="line">import requests</span><br><span class="line">resp = requests.get(<span class="string">&quot;http://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>,json=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;6713124465&quot;</span>&#125;)  <span class="comment">#通过id来检索设备并获取信息，该id为随机生成的例子</span></span><br><span class="line">resp</span><br><span class="line">resp.status_code  <span class="comment">#查看状态码判断访问是否成功，访问成功的HTTP状态码为200</span></span><br><span class="line">resp.text</span><br><span class="line">resp.json()</span><br></pre></td></tr></table></figure></div>

<p>​	同时还支持用“序号SN-类型”来检索设备</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.get(<span class="string">&quot;http://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>, json=&#123;<span class="string">&quot;sn&quot;</span>: <span class="string">&quot;XRmiI&quot;</span>, <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Raspberry Pi 4&quot;</span>&#125;)  <span class="comment">#该组合信息为随机生成的例子</span></span><br><span class="line">resp.status_code</span><br><span class="line">resp.json()</span><br></pre></td></tr></table></figure></div>

<p>​	体验删除接口</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.delete(<span class="string">&quot;http://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>, json=&#123;<span class="string">&quot;ids&quot;</span>:[<span class="string">&quot;3116641919&quot;</span>, <span class="string">&quot;94791787847&quot;</span>, <span class="string">&quot;1234567890&quot;</span>]&#125;)</span><br><span class="line">resp.json()</span><br><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv  <span class="comment">#查看设备信息是否被删除</span></span><br></pre></td></tr></table></figure></div>

<p>​	体验添加设备接口</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.post(</span><br><span class="line">    <span class="string">&quot;htpp://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>,</span><br><span class="line">    json=&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test-name&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;controller&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hardware&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;model&quot;</span>: <span class="string">&quot;test-model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sn&quot;</span>: <span class="string">&quot;test-sn&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;last_update&quot;</span>: <span class="string">&quot;2023-08-06 20:00:00&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;nic&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;wifi&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;mac&quot;</span>: <span class="string">&quot;12:34:56:78:9a:bc&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;ipv4&quot;</span>: <span class="string">&quot;192.168.1.2&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;online&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">resp.json()</span><br><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv  <span class="comment">#查看设备信息是否成功添加</span></span><br></pre></td></tr></table></figure></div>

<p>​	体验更新设备信息接口</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.put(</span><br><span class="line">    <span class="string">&quot;http://127.0.0.1:8000/v1/devices&quot;</span>,</span><br><span class="line">    json=&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;0922282528&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;new-name&quot;</span>,</span><br><span class="line">        <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_update&quot;</span>: <span class="string">&quot;2023-08-06 10:00:00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;offline&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">resp.json()</span><br><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv  <span class="comment">#查看是否成功更新设备信息</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3-3-遇到的主要问题、解决思路和收获"><a href="#3-3-遇到的主要问题、解决思路和收获" class="headerlink" title="3.3 遇到的主要问题、解决思路和收获"></a>3.3 遇到的主要问题、解决思路和收获</h4><p>​	该实验暂未遇到问题</p>
<h3 id="4-基于阿里云云效Flow的Python-Web服务构建与部署"><a href="#4-基于阿里云云效Flow的Python-Web服务构建与部署" class="headerlink" title="4. 基于阿里云云效Flow的Python Web服务构建与部署"></a>4. 基于阿里云云效Flow的Python Web服务构建与部署</h3><h4 id="4-1-实验目标与相关知识技能"><a href="#4-1-实验目标与相关知识技能" class="headerlink" title="4.1 实验目标与相关知识技能"></a>4.1 实验目标与相关知识技能</h4><p>•     掌握Python虚拟环境的应用和操作</p>
<p>•     熟练运用阿里云云服务器ECS、阿里云云效代码管理Codeup与流水线Flow，以及阿里云容器镜像服务ACR</p>
<p>•     掌握Python项目部署的多种方式，初步体验流水线的应用模式</p>
<h4 id="4-2-实验步骤与对应成果展示"><a href="#4-2-实验步骤与对应成果展示" class="headerlink" title="4.2 实验步骤与对应成果展示"></a>4.2 实验步骤与对应成果展示</h4><p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/exp_pyms_demo">exp_pyms_demo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	用Xftp 7把范例服务包上传至云端解压，并在ECS服务器上的虚拟环境部署范例服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf exp_pyms_demo.tar.gz</span><br><span class="line"><span class="built_in">cd</span> exp_pyms_demo</span><br><span class="line">python3 -m venv exp_venv</span><br><span class="line"><span class="built_in">source</span> exp_env/bin/activate</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></div>

<p>​	启动Python Web服务：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3 server.py</span><br></pre></td></tr></table></figure></div>

<p>​	使用本地浏览器访问<code>&lt;ECS_IP&gt;:8000/</code>，查看服务页面输出</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc70cfae4.jpg" alt="img"></p>
<p>​	确认无误后在终端输入<code>Ctrl + C</code>停止服务，退出虚拟环境venv并删除虚拟目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line"><span class="built_in">rm</span> -r exp_venv</span><br></pre></td></tr></table></figure></div>

<p>​	在exp_pyms_demo目录下创建Dockerfile文件，将Python Web服务范例代码打包进容器镜像</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于Python 最新基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.10</span>-slim-buster</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;&lt;yud0u@qq.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python库</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pip3 install -r requirements.txt</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 清理 apt 软件包缓存</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前文件夹中全部文件到镜像中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露服务端口 8000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动时执行命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;python3&quot;</span>, <span class="string">&quot;server.py&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker build</code>命令构建镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t exp_pyms_demo .</span><br><span class="line">docker images  <span class="comment">#查询镜像是否构建成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	启动相关容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always --name exp_pyms_demo -p 8000:8000 exp_pyms_demo</span><br></pre></td></tr></table></figure></div>

<p>​	同样在浏览器上访问<code>http://&lt;ECS_IP&gt;:8000/</code>，查看服务页面输出来验证。或者用<code>curl</code>命令来验证	</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.l:8000</span><br></pre></td></tr></table></figure></div>

<p>​	验证成功后停止、删除容器后，删除镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop exp_pyms_demo</span><br><span class="line">docker <span class="built_in">rm</span> exp_pyms_demo</span><br><span class="line">docker rmi exp_pyms_demo</span><br></pre></td></tr></table></figure></div>

<p>​	本地下载范例服务包后，进行本地仓库初始化并关联远程仓库,创建venv分支为后续实验做准备</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@codeup.aliyun.com:66e7c39e4244e4202214531d/exp_pyms_demo.git</span><br><span class="line">git pull origin master</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line">git push -u origin master</span><br><span class="line">git chechout -b venv  <span class="comment">#创建venv分支并切换</span></span><br><span class="line">git push --set-upstream origin venv  <span class="comment">#创建远程仓库，与本地仓库关联</span></span><br></pre></td></tr></table></figure></div>

<p>​	配置云效Flow以支持ECS虚拟环境部署，选择代码源为Codeup的代码仓库exp_pyms_demo，默认分支为venv，将ECS服务器配置到主机部署中，运行流水线</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc725cd6b.png" alt="image-20250115214222161"></p>
<p>​	此时可以通过<code>curl</code>命令测试服务接口是否可访问，或通过浏览器访问<code>&lt;ECS_IP&gt;:8000/</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:8000</span><br></pre></td></tr></table></figure></div>

<p>​	修改devices.csv，添加一条设备信息，并推送至远程仓库触发流水线执行，用浏览器重新访问</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc6fc5160.jpg" alt="img"></p>
<p>​	可以看到已显示添加的设备信息，关闭范例服务</p>
<p>​	将之前准备好的Dockerfile文件用于在流水线中制作承载范例服务的Docker镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git add Dockerfile</span><br><span class="line">git commit -m <span class="string">&quot;docs: Add Dockerfile&quot;</span></span><br><span class="line">git push --set-upsstream origin docker</span><br></pre></td></tr></table></figure></div>

<p>​	重新配置好流水线源后运行流水线，改用Docker部署</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc6ec3a37.gif" alt="img"></p>
<p>​	根据「Python代码扫码阶段」所提示的信息，修改server.py存在的格式问题后提交、推送</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc6ecbf63.gif" alt="img"></p>
<h4 id="4-3-遇到的主要问题、解决思路和收获"><a href="#4-3-遇到的主要问题、解决思路和收获" class="headerlink" title="4.3 遇到的主要问题、解决思路和收获"></a>4.3 遇到的主要问题、解决思路和收获</h4><p><strong>(✅）本实验遇到的最大问题为：Dockerfile中拉取python:3.10-slim-buster超时</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc6f76e17.gif" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc704af44.gif" alt="img"></p>
<ol>
<li>（❌）根据该页面的智能排查，我尝试从阿里云ACR制品中心中拉取alinux3&#x2F;python来替代，后续出现一系列如：apt-get命令不存在，需替换成apk等问题，最后发现是操作系统之间不兼容，下载的python是基于alinux3的</li>
</ol>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc719e2bd.gif" alt="img"></p>
<ol start="2">
<li>（✅）咨询了阿里云在线客服后，把「Python镜像构建」配置中的构建集群改为「云效中国香港构建集群」，即可顺利拉取</li>
</ol>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/15/6787bc723e717.gif" alt="img"></p>
<h3 id="5-基于阿里云函数计算的简单邮件发送服务设计与体验"><a href="#5-基于阿里云函数计算的简单邮件发送服务设计与体验" class="headerlink" title="5. 基于阿里云函数计算的简单邮件发送服务设计与体验"></a>5. 基于阿里云函数计算的简单邮件发送服务设计与体验</h3><h4 id="5-1-实验目标与相关知识技能"><a href="#5-1-实验目标与相关知识技能" class="headerlink" title="5.1 实验目标与相关知识技能"></a>5.1 实验目标与相关知识技能</h4><p>•     理解并掌握函数计算FC的设计部署过程</p>
<p>•     理解并体验函数计算FC的弹性伸缩能力</p>
<h4 id="5-2-实验步骤与对应成果展示"><a href="#5-2-实验步骤与对应成果展示" class="headerlink" title="5.2 实验步骤与对应成果展示"></a>5.2 实验步骤与对应成果展示</h4><p>​	创建自定义公共层，提供<code>Python Sanic</code>依赖，以供后续实验进行。兼容运行时选择<code>Debian 10</code>，构建环境选择<code>Python 3.10</code>，<code>requirements.txt</code>文件中输入<code>sanic</code></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/17/67893490f2a20.gif" alt="img"></p>
<p>​	创建Web函数<code>fun-alarm-email-send</code>，，基于<code>Sanic</code>框架编写接口代码，构建并部署告警邮件发送接口</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line">app = Sanic(<span class="string">&quot;EmailSender&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件配置 需要自行修改。邮箱授权码(password)的获取，自行前往对应</span></span><br><span class="line">EMAIL_CONFIG = &#123;</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;smtp.example.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: <span class="number">587</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;your-email@example.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;your-password&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sender&quot;</span>: <span class="string">&quot;your-email@example.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">recipient, subject, body</span>):</span><br><span class="line">    <span class="comment"># 创建邮件对象</span></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = EMAIL_CONFIG[<span class="string">&quot;sender&quot;</span>]</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = recipient</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = subject</span><br><span class="line">    <span class="comment"># 添加邮件正文</span></span><br><span class="line">    msg.attach(MIMEText(body, <span class="string">&#x27;plain&#x27;</span>))</span><br><span class="line">    <span class="comment"># 连接SMTP服务器</span></span><br><span class="line">    server = SMTP(EMAIL_CONFIG[<span class="string">&quot;host&quot;</span>], EMAIL_CONFIG[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">    server.starttls()  <span class="comment"># 启动TLS加密</span></span><br><span class="line">    server.login(EMAIL_CONFIG[<span class="string">&quot;username&quot;</span>], EMAIL_CONFIG[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    server.send_message(msg)</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/send&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email_route</span>(<span class="params">request</span>):</span><br><span class="line">    data = request.json</span><br><span class="line">    recipient = data.get(<span class="string">&quot;recipient&quot;</span>)</span><br><span class="line">    subject = data.get(<span class="string">&quot;subject&quot;</span>)</span><br><span class="line">    body = data.get(<span class="string">&quot;body&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([recipient, subject, body]):</span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Missing required fields&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        send_email(recipient, subject, body)</span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Email sent successfully&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;, status=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	代码修改后，删除现有的<code>官方公共层Flask</code>，并添加自定义创建的<code>sanic-custom-layer</code>层后部署，最后部署代码。利用Apifox工具编写对邮件发送接口发起HTTP接口</p>
<p>​	<img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/17/6789349115adf.jpg" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/17/67893490ef776.jpg" alt="img"></p>
<p>​	点进函数详情页面的<code>配置-运行时</code>按钮，修改单实例并发度为2，最后部署。随后在Apifox上点击<code>自动化测试</code>按钮新增测试场景，填写请求信息后，将线程数设置为10，即同时并发执行的线程数一共10个。监控函数详情页面的实例列表</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/17/67893491138c4.jpg" alt="img"></p>
<h4 id="5-3-遇到的主要问题、解决思路和收获"><a href="#5-3-遇到的主要问题、解决思路和收获" class="headerlink" title="5.3 遇到的主要问题、解决思路和收获"></a>5.3 遇到的主要问题、解决思路和收获</h4><p>​	该实验暂未遇到问题</p>
<h3 id="6-基于阿里云函数计算的云工作流CloudFlow设计与体验"><a href="#6-基于阿里云函数计算的云工作流CloudFlow设计与体验" class="headerlink" title="6. 基于阿里云函数计算的云工作流CloudFlow设计与体验"></a>6. 基于阿里云函数计算的云工作流CloudFlow设计与体验</h3><h4 id="6-1-实验目标与相关知识技能"><a href="#6-1-实验目标与相关知识技能" class="headerlink" title="6.1 实验目标与相关知识技能"></a>6.1 实验目标与相关知识技能</h4><p>•     理解并掌握阿里云CloudFlow的基本概念，及其与函数计算点的可视化编排工具，能够按需设计CloudFlow，通过编排多个函数计算的自动执行工作流，从而构建服务接口</p>
<h4 id="6-2-实验步骤与对应成果展示"><a href="#6-2-实验步骤与对应成果展示" class="headerlink" title="6.2 实验步骤与对应成果展示"></a>6.2 实验步骤与对应成果展示</h4><p>​	在<a class="link" href="https://ram.console.aliyun.com/roles%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2%EF%BC%8C%E5%88%86%E9%85%8D%E7%9A%84%E6%9D%83%E9%99%90%E5%8C%85%E6%8B%AC%EF%BC%9A%60AliyunFCFullAccess%60%E3%80%81%60AliyunFnFFullAccess%60%E3%80%81%60AliyunEventBridgeFullAccess%60">https://ram.console.aliyun.com/roles中创建角色，分配的权限包括：`AliyunFCFullAccess`、`AliyunFnFFullAccess`、`AliyunEventBridgeFullAccess` <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	在<a class="link" href="https://eventbridge.console.aliyun.com/overview%E4%B8%AD%E4%B8%80%E9%94%AE%E6%8E%88%E6%9D%83%EF%BC%8C%E5%AF%B9%60EventBridge%60%E8%BF%9B%E8%A1%8C%E6%8E%88%E6%9D%83">https://eventbridge.console.aliyun.com/overview中一键授权，对`EventBridge`进行授权 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	构建名为<code>fun-temperature-and-humidity-data-upload</code>的FC函数</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;MyApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 温度阈值</span></span><br><span class="line">t_threshold = (<span class="number">25</span>, <span class="number">28</span>)</span><br><span class="line"><span class="comment"># 湿度阈值</span></span><br><span class="line">h_threshold = (<span class="number">30</span>, <span class="number">33</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        sn = data.get(<span class="string">&quot;sn&quot;</span>)</span><br><span class="line">        temperature = data.get(<span class="string">&quot;temperature&quot;</span>)</span><br><span class="line">        humidity = data.get(<span class="string">&quot;humidity&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([sn, temperature, humidity]):</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Missing required fields&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断温湿度是否超出阈值</span></span><br><span class="line">        t_out_flag = <span class="keyword">not</span> (t_threshold[<span class="number">0</span>] &lt;= temperature &lt;= t_threshold[<span class="number">1</span>])</span><br><span class="line">        h_out_flag = <span class="keyword">not</span> (h_threshold[<span class="number">0</span>] &lt;= humidity &lt;= h_threshold[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        email_body = generate_email_body(sn, temperature, humidity, t_threshold, h_threshold)</span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">1</span> <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;异常&quot;</span> <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="string">&quot;正常&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                <span class="comment"># 需要自定替换成收件人邮箱地址</span></span><br><span class="line">                <span class="string">&quot;recipient&quot;</span>: <span class="string">&quot;synx@example.com&quot;</span>,</span><br><span class="line">                <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;告警邮件 - 温湿度异常&quot;</span>,</span><br><span class="line">                <span class="string">&quot;body&quot;</span>: email_body</span><br><span class="line">            &#125; <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json(res)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;, status=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_email_body</span>(<span class="params">sn, temperature, humidity, t_threshold, h_threshold</span>):</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot;告警通知：\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;当前设备(&#123;sn&#125;)的温湿度数据超出正常范围。\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;设备温度：&#123;temperature&#125;°C\n&quot;</span></span><br><span class="line">        <span class="string">&quot;温度阈值：&#123;t_threshold[0]&#125;°C - &#123;t_threshold[1]&#125;°C\n&quot;</span></span><br><span class="line">        <span class="string">&quot;设备湿度：&#123;humidity&#125;%\n&quot;</span></span><br><span class="line">        <span class="string">&quot;湿度阈值：&#123;h_threshold[0]&#125;% - &#123;h_threshold[1]&#125;%\n&quot;</span></span><br><span class="line">        <span class="string">&quot;请尽快检查设备并采取相应措施。\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;时间：&#123;datetime.datetime.now().isoformat()&#125;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	此时，FC函数列表中应该有两个函数</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491a652e6.gif" alt="img"></p>
<p>​	创建云工作流，地域需与FC所在地域保持一致。采用快速模式来设置工作流，点击<code>CloudFlow Studio</code>按钮回到画布编辑页面，删除工作流默认创建的Hello World， 并从左侧操作拖拽<code>InvokeFunction</code>任务状态到画布上，命名为<code>fun-temperature-and-humidity-data-upload</code>，右侧<code>基本配置</code>中切换YAML编辑，在YAML框内添加<code>body.$: $Input.body</code>，点击保存。在输出配置中，勾选使用JsonPath选择部分参数，填入<code>$Output.Body</code>，点击保存。</p>
<p>​	再拖拽一个InvokeFunction任务，命名为<code>fun-alarm-email-end</code>，配置YAML数据负载时，填写<code>body.$: $Input.data</code></p>
<p>​	从左侧拖拽<code>Choice</code>放置在两个<code>InvokeFunction</code>之间，再拖拽<code>Succeed</code>补全步骤，Choice<code>默认规则</code>的下个状态设置为Succeed，<code>自定义 #1</code>卡片添加条件<code>$Input.status == 1</code>，并设置下个状态为fun-alarm-email-send，点击保存</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491bd5211.gif" alt="img"></p>
<p>​	修改<code>fun-alarm-email-send</code>FC代码，以适配云工作流调用</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Python</span><br><span class="line"><span class="comment"># 源代码：</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/send&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="comment"># 修改为：</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/send&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>], name=<span class="string">&#x27;send&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/invoke&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>], name=<span class="string">&#x27;invoke&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure></div>

<p>​	修改<code>fun-temperature-and-humidity-data-upload</code>FC代码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源代码：</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="comment"># 修改为：</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>], name=<span class="string">&#x27;upload&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/invoke&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>], name=<span class="string">&#x27;invoke&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure></div>

<p>​	返回<code>工作流详情</code>界面，点击<code>工作流调度</code>标签页，创建工作流调度并选择<code>HTTP/HTTPS触发</code>，请求类型选择<code>HTTPS</code>，请求方法为<code>POST</code>，返回工作流详情页面后点击<code>详情</code>按钮，复制<code>公网访问地址</code></p>
<p>​	使用Apifox对云工作流公网发起POST请求</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491b3305d.jpg" alt="img"></p>
<p>​	返回<code>工作流详情</code>页面，点击<code>执行记录</code>标签，将出现一条执行记录</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491b43413.jpg" alt="img"></p>
<p>​	点击<code>详情</code>可查看详细的执行流程</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491cad09a.jpg" alt="img"></p>
<p>​	修改请求的数据，将<code>temperature</code>改为40，模拟设备出现异常情况。发起请求后查看详细执行流程</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491a6f99a.jpg" alt="img"></p>
<h4 id="6-3-遇到的主要问题、解决思路和收获"><a href="#6-3-遇到的主要问题、解决思路和收获" class="headerlink" title="6.3 遇到的主要问题、解决思路和收获"></a>6.3 遇到的主要问题、解决思路和收获</h4><p>​	本实验仅遇到一个<strong>乌龙</strong>，花了一个多小时才debug出来：即在<code>flow-temperature-and-humidity-data-upload</code>的YAML编辑中，错把<code>$Input.body</code>填成<code>$Input.Body</code>，填写了大写的B。导致后续用Apifox发起请求时返回结果与范例不同。调用云工作流内部的测试功能，观察每个InvokeFunction的输入与输出后，意识到请求数据从未进入过流程当中，于是问题锁定在第一个InvokeFunction中，在研究数据如何导入的过程中，发现数据是根据<code>$Input.body</code>导入的，最终发现并解决了这个乌龙</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/23/6792491cab23f.gif" alt="img"></p>
<h3 id="7-基于阿里云函数计算的简单邮件发送服务之数据库访问中间件"><a href="#7-基于阿里云函数计算的简单邮件发送服务之数据库访问中间件" class="headerlink" title="7. 基于阿里云函数计算的简单邮件发送服务之数据库访问中间件"></a>7. 基于阿里云函数计算的简单邮件发送服务之数据库访问中间件</h3><h4 id="7-1-实验目标与相关知识技能"><a href="#7-1-实验目标与相关知识技能" class="headerlink" title="7.1 实验目标与相关知识技能"></a>7.1 实验目标与相关知识技能</h4><p>•     掌握基于PyMySQL使用原生SQL开展数据库表访问的基本操作</p>
<p>•     掌握基于ORM框架的SQLAlchemy开展数据库表访问</p>
<h4 id="7-2-实验步骤与对应成果展示"><a href="#7-2-实验步骤与对应成果展示" class="headerlink" title="7.2 实验步骤与对应成果展示"></a>7.2 实验步骤与对应成果展示</h4><p>​	进入PolarDB的控制台，创建集群后，为集群配置白名单，允许所有IP访问(0.0.0.0&#x2F;0)</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee4f233ad.png" alt="image-20250125215109634"></p>
<p>​	在基本信息中找到数据库连接，复制私网地址以供后续实验使用</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee549c8eb.png" alt="image-20250125215128017"></p>
<p>​	查看当前专有网络VPC和交换机vSwitch信息，保证后续实验产品共用同一套VPC和vSwitch</p>
<p>​	构建FC自定义公共层，提供<code>Python sqlalchemy</code>依赖，并为<code>fun-alarm-email-send</code>函数配置相同的VPC和vSwitch</p>
<p>​	使用阿里云提供的云数据库统一控制台(<a class="link" href="https://dmslab.aliyun.com/)%E5%AF%B9PolarDB%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%EF%BC%8C%E7%99%BB%E5%BD%95%E5%AE%9E%E4%BE%8B%E5%90%8E%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%82%B9%E5%87%BB%60%E5%88%9B%E5%BB%BA%E5%BA%93%60%E6%8C%89%E9%92%AE%E6%96%B0%E5%BB%BA%60db_message%60%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E5%AD%97%E7%AC%A6%E9%9B%86%E9%80%89%E6%8B%A9utf8mb4">https://dmslab.aliyun.com/)对PolarDB进行操作，登录实例后进入管理页面，点击`创建库`按钮新建`db_message`数据库，字符集选择utf8mb4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	打开<code>db_message</code>的SQL控制台，使用以下SQL语句创建<code>tbl_config</code>表结构</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_config` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;配置记录的唯一标识符&#x27;</span>,</span><br><span class="line">  `host` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮件服务器的主机地址&#x27;</span>,</span><br><span class="line">  `post` <span class="type">int</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮件服务器的端口号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;登录邮件服务器的用户名，示例：1464935327@qq.com&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;登录邮件服务器的授权码&#x27;</span>,</span><br><span class="line">  `sender` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮件发送人的地址，示例：1464935327@qq.com&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;记录创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;记录最后更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;邮件配置表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `tbl_config` </span><br><span class="line"> LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure></div>

<p>​	重写<code>fun-alarm-email-send</code>函数，新建<code>email_config_service.py</code>，代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> custom_json_encoder <span class="keyword">import</span> DateTimeEncoder</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_db_connection</span>():</span><br><span class="line">    <span class="keyword">return</span> pymysql.connect(</span><br><span class="line">        host=<span class="string">&#x27;pc-bp1f07b8tpl06q3qu.mysql.polardb.rds.aliyuncs.com&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&#x27;yudou&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;ZYDzyd917917&#x27;</span>,</span><br><span class="line">        db=<span class="string">&#x27;db_message&#x27;</span>,</span><br><span class="line">        charset=<span class="string">&#x27;utf8mb4&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> connection:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    INSERT INTO tbl_config (</span></span><br><span class="line"><span class="string">                        host,</span></span><br><span class="line"><span class="string">                        port,</span></span><br><span class="line"><span class="string">                        username,</span></span><br><span class="line"><span class="string">                        password,</span></span><br><span class="line"><span class="string">                        sender) </span></span><br><span class="line"><span class="string">                        VALUES (%s, %s, %s, %s, %s)</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>, (data[<span class="string">&#x27;host&#x27;</span>], data[<span class="string">&#x27;port&#x27;</span>], data[<span class="string">&#x27;username&#x27;</span>], data[<span class="string">&#x27;password&#x27;</span>], data[<span class="string">&#x27;sender&#x27;</span>]))</span><br><span class="line">                connection.commit()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Config created successfully&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        connection.rollback()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> connection:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(<span class="string">&quot;SELECT * FROM tbl_config LIMIT 1&quot;</span>)</span><br><span class="line">                result = cursor.fetchone()</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    config = &#123;</span><br><span class="line">                        <span class="string">&quot;id&quot;</span>: result[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&quot;host&quot;</span>: result[<span class="number">1</span>],</span><br><span class="line">                        <span class="string">&quot;port&quot;</span>: result[<span class="number">2</span>],</span><br><span class="line">                        <span class="string">&quot;username&quot;</span>: result[<span class="number">3</span>],</span><br><span class="line">                        <span class="string">&quot;password&quot;</span>: result[<span class="number">4</span>],</span><br><span class="line">                        <span class="string">&quot;sender&quot;</span>: result[<span class="number">5</span>],</span><br><span class="line">                        <span class="string">&quot;create_time&quot;</span>: result[<span class="number">6</span>],</span><br><span class="line">                        <span class="string">&quot;update_time&quot;</span>: result[<span class="number">7</span>],</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> json.loads(json.dumps(config, cls=DateTimeEncoder))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;No configuration found&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> get_db_connection <span class="keyword">as</span> connection:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data.get(<span class="string">&quot;id&quot;</span>):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;id is required&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                sql = <span class="string">&quot;UPDATE tbl_config SET&quot;</span></span><br><span class="line">                params = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;sender&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">if</span> data.get(<span class="string">&quot;key&quot;</span>):</span><br><span class="line">                        sql += <span class="string">f&quot; <span class="subst">&#123;key&#125;</span> = %s,&quot;</span></span><br><span class="line">                        params.append(data[key])</span><br><span class="line">                    </span><br><span class="line">                sql = sql.rstrip(<span class="string">&quot;,&quot;</span>) + <span class="string">&quot; WHERE id = %s&quot;</span></span><br><span class="line">                params.append(data[<span class="string">&quot;id&quot;</span>])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> cursor.execute(sql, <span class="built_in">tuple</span>(params)) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Config not found&quot;</span>)</span><br><span class="line">                connection.commit()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Config updated successfully&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        connection.rollback()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> connection:</span><br><span class="line">            <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data.get(<span class="string">&quot;id&quot;</span>):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;id is required&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> cursor.execute(<span class="string">&quot;DELETE FROM tbl_config WHERE id = %s&quot;</span>, (data[<span class="string">&quot;id&quot;</span>],)) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Config not found&quot;</span>)</span><br><span class="line">                connection.commit()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Config deleted successfully&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        connection.rollback()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br></pre></td></tr></table></figure></div>

<p>​	新建<code>custom_json_encoder.py</code>，代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DateTimeEncoder</span>(json.JSONEncoder):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, datetme):</span><br><span class="line">            <span class="keyword">return</span> obj.isoformat()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().default(obj)</span><br></pre></td></tr></table></figure></div>

<p>​	修改<code>app.py</code>代码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">as</span> std_json</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic,response</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email_config_service <span class="keyword">import</span> (create_config,</span><br><span class="line">                                  delete_config,</span><br><span class="line">                                  read_config,</span><br><span class="line">                                  update_config)</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;EmailSender&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">data</span>):</span><br><span class="line">        email_config = <span class="keyword">await</span> read_config(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        msg = MIMEMultipart()</span><br><span class="line">        msg[<span class="string">&#x27;From&#x27;</span>] = email_config[<span class="string">&quot;sender&quot;</span>]</span><br><span class="line">        msg[<span class="string">&#x27;To&#x27;</span>] = data.get(<span class="string">&quot;recipient&quot;</span>)</span><br><span class="line">        msg[<span class="string">&#x27;Subject&#x27;</span>] = data.get(<span class="string">&quot;subject&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg.attach(MIMEText(data.get(<span class="string">&quot;body&quot;</span>), <span class="string">&#x27;plain&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        server = SMTP(email_config[<span class="string">&quot;host&quot;</span>], email_config[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        server.starttls()</span><br><span class="line">        server.login(email_config[<span class="string">&quot;username&quot;</span>],email_config[<span class="string">&quot;password&quot;</span>])</span><br><span class="line"></span><br><span class="line">        server.send_message(msg)</span><br><span class="line"></span><br><span class="line">        server.quit()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Email sent successfully&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/invoke&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_email_route</span>(<span class="params">request</span>):</span><br><span class="line">        action = request.json.get(<span class="string">&quot;action&quot;</span>)</span><br><span class="line">        data = request.json.get(<span class="string">&quot;data&quot;</span>,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        actions = &#123;</span><br><span class="line">                <span class="string">&quot;create_config&quot;</span>: create_config,</span><br><span class="line">                <span class="string">&quot;read_config&quot;</span>: read_config,</span><br><span class="line">                <span class="string">&quot;update_config&quot;</span>: update_config,</span><br><span class="line">                <span class="string">&quot;delete_config&quot;</span>: delete_config,</span><br><span class="line">                <span class="string">&quot;send_email&quot;</span>: send_email</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        func = actions.get(action)</span><br><span class="line">        <span class="keyword">if</span> func:</span><br><span class="line">                <span class="keyword">return</span> json(<span class="keyword">await</span> func(data))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response.json(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Invalid action&quot;</span>&#125;,status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9000</span>, dev=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	使用Apifox进行测试新增数据库数据</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee4e81c3b.png" alt="image-20250125215710922"></p>
<p>​	打开<code>db_message</code>库中的<code>tbl_config</code>表，可发现数据已存储</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee4d2e449.png" alt="image-20250125215756245"></p>
<p>​	测试告警邮件</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee4d47054.png" alt="image-20250125215813828"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee4fc7f22.png" alt="image-20250125215827190"></p>
<p>​	基于sqlalchemy重写<code>email_config_service.py</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, DateTime, Integer, String, create_engine, func</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> custom_json_encoder <span class="keyword">import</span> DateTimeEncoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;tbl_config&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    host = Column(String(<span class="number">255</span>))</span><br><span class="line">    port = Column(Integer)</span><br><span class="line">    username = Column(String(<span class="number">255</span>))</span><br><span class="line">    password = Column(String(<span class="number">255</span>))</span><br><span class="line">    sender = Column(String(<span class="number">255</span>))</span><br><span class="line">    create_time = Column(DateTime, server_default=func.now())</span><br><span class="line">    update_time = Column(DateTime, server_default=func.now(), onupdate=func.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_db_connection</span>():</span><br><span class="line">    DB_HOST = <span class="string">&#x27;pc-bp1f07b8tpl06q3qu.mysql.polardb.rds.aliyuncs.com&#x27;</span></span><br><span class="line">    DB_PORT = <span class="number">3306</span></span><br><span class="line">    DB_USER = <span class="string">&#x27;yudou&#x27;</span></span><br><span class="line">    DB_PASSWORD = <span class="string">&#x27;ZYDzyd917917&#x27;</span></span><br><span class="line">    DB_NAME = <span class="string">&#x27;db_message&#x27;</span></span><br><span class="line">    encoded_password = urllib.parse.quote_plus(DB_PASSWORD)</span><br><span class="line">    DATABASE_URL = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;DB_USER&#125;</span>:<span class="subst">&#123;encoded_password&#125;</span>@<span class="subst">&#123;DB_HOST&#125;</span>:<span class="subst">&#123;DB_PORT&#125;</span>/<span class="subst">&#123;DB_NAME&#125;</span>&#x27;</span></span><br><span class="line">    engine = create_engine(DATABASE_URL, echo=<span class="literal">True</span>)</span><br><span class="line">    Session = sessionmaker(bind=engine)</span><br><span class="line">    <span class="keyword">return</span> Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建配置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            config = Config(</span><br><span class="line">                host=data[<span class="string">&#x27;host&#x27;</span>],</span><br><span class="line">                port=data[<span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">                username=data[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                password=data[<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">                sender=data[<span class="string">&#x27;sender&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">            session.add(config)</span><br><span class="line">            session.commit()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Config created successfully&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> e:</span><br><span class="line">            session.rollback()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取配置，此处仅做最简单的查询，实际应用中需要根据业务需求进行查询&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            config = session.query(Config).first()</span><br><span class="line">            <span class="keyword">if</span> config:</span><br><span class="line">                config_dict = &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: config.<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&quot;host&quot;</span>: config.host,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>: config.port,</span><br><span class="line">                    <span class="string">&quot;username&quot;</span>: config.username,</span><br><span class="line">                    <span class="string">&quot;password&quot;</span>: config.password,</span><br><span class="line">                    <span class="string">&quot;sender&quot;</span>: config.sender,</span><br><span class="line">                    <span class="string">&quot;create_time&quot;</span>: config.create_time,</span><br><span class="line">                    <span class="string">&quot;update_time&quot;</span>: config.update_time</span><br><span class="line">                &#125;</span><br><span class="line">                encoded_result = json.dumps(config_dict, cls=DateTimeEncoder)</span><br><span class="line">                <span class="keyword">return</span> json.loads(encoded_result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;No configuration found&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> e:</span><br><span class="line">            session.rollback()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;更新配置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            config = Config(</span><br><span class="line">                host=data[<span class="string">&#x27;host&#x27;</span>],</span><br><span class="line">                port=data[<span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">                username=data[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                password=data[<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">                sender=data[<span class="string">&#x27;sender&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">            session.add(config)</span><br><span class="line">            session.commit()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Config updated successfully&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> e:</span><br><span class="line">            session.rollback()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_config</span>(<span class="params">data</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除配置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> get_db_connection() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            config_id = data.get(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> config_id:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;id is required&quot;</span>)</span><br><span class="line">            config = session.query(Config).<span class="built_in">filter</span>(Config.<span class="built_in">id</span> == config_id).first()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> config:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Config not found&quot;</span>)</span><br><span class="line">            session.delete(config)</span><br><span class="line">            session.commit()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Config deleted successfully&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> e:</span><br><span class="line">            session.rollback()</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br></pre></td></tr></table></figure></div>

<p>​	同上进行测试，结果应该不变</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794ee5091978.png" alt="image-20250125215934920"></p>
<h4 id="7-3-遇到的主要问题、解决思路和收获"><a href="#7-3-遇到的主要问题、解决思路和收获" class="headerlink" title="7.3 遇到的主要问题、解决思路和收获"></a>7.3 遇到的主要问题、解决思路和收获</h4><p>​	该实验暂未遇到问题</p>
<h3 id="8-基于阿里云Serverless应用引擎的服务部署迁移"><a href="#8-基于阿里云Serverless应用引擎的服务部署迁移" class="headerlink" title="8. 基于阿里云Serverless应用引擎的服务部署迁移"></a>8. 基于阿里云Serverless应用引擎的服务部署迁移</h3><h4 id="8-1-实验目标与相关知识技能"><a href="#8-1-实验目标与相关知识技能" class="headerlink" title="8.1 实验目标与相关知识技能"></a>8.1 实验目标与相关知识技能</h4><p>•     熟练运用云效Codeup代码仓库的使用</p>
<p>•     理解并掌握阿里云Serverless应用引擎部署应用的方法</p>
<h4 id="8-2-实验步骤与对应成果展示"><a href="#8-2-实验步骤与对应成果展示" class="headerlink" title="8.2 实验步骤与对应成果展示"></a>8.2 实验步骤与对应成果展示</h4><p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/user_admin">user_admin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/device_control">device_control <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	将以上用户管理服务代码与设备管理服务代码上传到云效Codeup</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7ea8a03e.png" alt="image-20250125224215016"></p>
<p>​	修订user-admin中application.yml的代码。(12<del>14行)中MySQL数据库配置更改为PolarDB MySQL的内网访问地址及对应的用户名密码。(42</del>44行)中Redis数据库配置为Redis数据库配置信息</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7ea4aadd.png" alt="image-20250125224225824"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7f1c1909.png" alt="image-20250125224243501"></p>
<p>​	打开device的代码，修改server-config.ini文件中MySQL数据库配置为PolarDB MySQL的内网访问地址及其对应的用户名密码。<code>callback_url</code>替换为CloudFlow的内网触发地址</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7ec74634.png" alt="image-20250125224256334"></p>
<p>​	进入阿里云DMS控制台，在PolarDB MySQL数据库中创建<code>db_user_admin</code>数据库，点击左侧常用功能-数据导入，选择批量数据导入，数据库选择<code>db_user_admin</code>，文件类型为SQL脚本，最后上传deviced_control的<code>init.sql</code>文件</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7ed1a674.png" alt="image-20250125224308225"></p>
<p>​	修改<code>fun-temperature-and-humidity-data-upload</code>FC函数</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原来温湿度数据上报FC的res数据结构如下</span></span><br><span class="line">res = &#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">1</span> <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;异常&quot;</span> <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="string">&quot;正常&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="comment"># 需要自定转换成收件人邮箱地址</span></span><br><span class="line">        <span class="string">&quot;recipient&quot;</span>: <span class="string">&quot;1464935327@qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;告警邮件 - 温湿度异常&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: <span class="string">&quot;email_body&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应该修订为以下格式</span></span><br><span class="line">res = &#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">1</span> <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;异常&quot;</span> <span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="string">&quot;正常&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;send_email&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="comment"># 需要自定转换成收件人邮箱地址</span></span><br><span class="line">            <span class="string">&quot;recipient&quot;</span>: <span class="string">&quot;1464935327@qq.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;告警邮件 - 温湿度异常&quot;</span>,</span><br><span class="line">            <span class="string">&quot;body&quot;</span>: <span class="string">&quot;email_body&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t_out_flag <span class="keyword">or</span> h_out_flag <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></div>

<p>​	进入SAE控制台创建<code>Web应用</code>，VPC与vSwitch不变，代码仓库类型选择Codeup，仓库选择serverless&#x2F;user-admin</p>
<pre><code> 启动命令如下设置：
</code></pre>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">java -jar target/user_admin-<span class="number">2024.j</span>ar</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7ecad7bc.png" alt="image-20250125222818655"></p>
<p>​	使用Apifox对User-Admin登录接口(<code>POST /login/account</code>)发起请求</p>
<p>​	请求实例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">POST https<span class="punctuation">:</span><span class="comment">//cn-hanger-admin-hvryfblqme.cn-hangzhou.sae.run/login/account</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yudou&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​	响应示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作执行成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;65086510285720102&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​	同理，基于SAE部署Device Control服务。设置启动命令为如下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python server.py</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7ee84db5.png" alt="image-20250125223132687"></p>
<p>​	使用Apifox对Device-Control的设备添加接口(<code>POST /devices</code>)发起请求</p>
<p>​	请求示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">POST https<span class="punctuation">:</span><span class="comment">//cn-hang-control-rcuipmgcxu.cn-hangzhou.sae.run</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;温湿度设备&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;null&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SNTAH&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;passwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>

<p>​	响应示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;设备信息添加成功！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/device_client">device_client <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	以上为模拟设备客户端代码示例，设备客户端用于模拟真实设备，构造温湿度数据并定期通过WebSocket通道上传数据至Device-Control</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个参数为Device - Control应用的地址(注意：不需要https://，只需要域名) </span></span><br><span class="line"><span class="comment"># 第二个参数是前面步骤创建的设备sn </span></span><br><span class="line"><span class="comment"># 第三个参数是该设备的密码 </span></span><br><span class="line">(venv)$ python client.py ws://&lt;your_sae_domain&gt;/devices/auth/ws SNT AH 123456 </span><br><span class="line"></span><br><span class="line">INFO:root:成功连接到 ws://&lt;your_sae_domain&gt;/devices/auth/ws? sn=SNT AH&amp;passwd=123456 </span><br><span class="line"></span><br><span class="line">REC:身份验证成功 </span><br><span class="line">REC:&#123;<span class="string">&quot;sn&quot;</span>:<span class="string">&quot;SNT AH&quot;</span>,<span class="string">&quot;temperature&quot;</span>:26.15,<span class="string">&quot;humidity&quot;</span>:31.97&#125; </span><br><span class="line">REC:&#123;<span class="string">&quot;sn&quot;</span>:<span class="string">&quot;SNT AH&quot;</span>,<span class="string">&quot;temperature&quot;</span>:25.25,<span class="string">&quot;humidity&quot;</span>:31.43&#125; </span><br><span class="line">REC:&#123;<span class="string">&quot;sn&quot;</span>:<span class="string">&quot;SNT AH&quot;</span>,<span class="string">&quot;temperature&quot;</span>:26.85,<span class="string">&quot;humidity&quot;</span>:30.08&#125; </span><br><span class="line">REC:&#123;<span class="string">&quot;sn&quot;</span>:<span class="string">&quot;SNT AH&quot;</span>,<span class="string">&quot;temperature&quot;</span>:35.8,<span class="string">&quot;humidity&quot;</span>:27.67&#125; </span><br><span class="line">REC:&#123;<span class="string">&quot;sn&quot;</span>:<span class="string">&quot;SNT AH&quot;</span>,<span class="string">&quot;temperature&quot;</span>:25.46,<span class="string">&quot;humidity&quot;</span>:30.67&#125;</span><br></pre></td></tr></table></figure></div>

<p>​	向Device-Control发送温湿度数据后，可以自行查看CloudFlow的云效情况，若CloudFlow正常工作，在温湿度超出阈值时将向指定的管理员邮箱发生告警邮件</p>
<h4 id="8-3-遇到的主要问题、解决思路和收获"><a href="#8-3-遇到的主要问题、解决思路和收获" class="headerlink" title="8.3 遇到的主要问题、解决思路和收获"></a>8.3 遇到的主要问题、解决思路和收获</h4><p><strong>（❌）该实验并未完成，在测试两个SAE服务时遇到无法解决的bug</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7efcdc6a.png" alt="image-20250125223842250"></p>
<p>​	上图为user-admin服务的日志，显示无法连接到PolarDB MySQL，但我反复确认各个阿里云产品的VPC和vSwitch都是一样的</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7f03a9ca.png" alt="image-20250125223910346">	<img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6794f7f1ecb69.png" alt="image-20250125223919940"></p>
<p>​	以上为Apifox测试时的报错，第一反应是Redis和PolarDB MySQL地址填写错误，检查Codeup内代码发现并未出错。再依次检查各个云产品的VPC，vSwitch，以及白名单，也未修复该bug。最后尝试删除<code>user-admin</code>Web服务重做，还是出现相同bug</p>
<h3 id="9-基于Nacos的服务注册与配置部署"><a href="#9-基于Nacos的服务注册与配置部署" class="headerlink" title="9. 基于Nacos的服务注册与配置部署"></a>9. 基于Nacos的服务注册与配置部署</h3><h4 id="9-1-实验目标与相关知识技能"><a href="#9-1-实验目标与相关知识技能" class="headerlink" title="9.1 实验目标与相关知识技能"></a>9.1 实验目标与相关知识技能</h4><p>•     理解并掌握微服务系统中，服务注册与发现机制的基本原理，相关中间件的系统定位和功能</p>
<p>•     理解并掌握服务注册与发现中间件Nacos的具体功能与应用模式</p>
<h4 id="9-2-实验步骤与对应成果展示"><a href="#9-2-实验步骤与对应成果展示" class="headerlink" title="9.2 实验步骤与对应成果展示"></a>9.2 实验步骤与对应成果展示</h4><p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/user_admin">user_admin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>📂：<a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/device_control">device_control <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	创建ACR镜像仓库，使用Docker拉取Nacos镜像，并上传至阿里云容器镜像仓库ACR</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nacos</span><br><span class="line"></span><br><span class="line">docker login --username=鱼豆YuDou crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com</span><br><span class="line">docker tag [ImageId] crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/nacos:[镜像版本号]</span><br><span class="line">docker push crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/nacos:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	在SAE控制台创建微服务，应用名称为<code>Nacos</code>，保证VPC，vSwitch，安全组与先前实验保持一致，添加环境变量<code>MODE=standalone</code>，部署Nacos</p>
<p>​	开通CLB负载均衡后，用浏览器访问<code>http://&lt;CLB公网IP&gt;:8848/nacos</code>，即可观察Nacos UI界面</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795072e6fc83.png" alt="image-20250125225940154"></p>
<p>​	在user-admin包中找到<strong>pom.xml</strong>，添加Nacos的依赖坐标</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...... (省略之前的依赖)</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.0-RC<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>​	修改<strong>src&#x2F;main&#x2F;resources&#x2F;application.yml文件</strong>，添加Nacos配置，实现自动注册</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">172.28</span><span class="number">.97</span><span class="number">.37</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">auto-register:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register:</span></span><br><span class="line">      <span class="attr">service-name:</span> <span class="string">user-admin</span></span><br><span class="line">      <span class="attr">ip:</span> <span class="string">https://cn-hanger-admin-hvryfblqme.cn-hangzhou-vpc.sae.run</span></span><br><span class="line">      <span class="attr">ephemeral:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">healthy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<p>​	修改后推送代码至Codeup触发自动部署，进入Nacos UI界面可以看到user-admin服务已注册</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/679507285cf1e.png" alt="image-20250125230138535"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795072946ca1.png" alt="image-20250125230228281"></p>
<p>​	修改Device-Control中的server.py代码，实现应用启动时自动向Nacos注册</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&#x27;before_server_start&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">register_nacos</span>(<span class="params">app, loop</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> nacos</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自行替换为 Nacos 内网ip地址</span></span><br><span class="line">        SERVER_ADDRESSES = <span class="string">&quot;http://172.28.97.37:8848&quot;</span></span><br><span class="line">        <span class="comment"># Nacos注册的信息</span></span><br><span class="line">        SERVICE_NAME = <span class="string">&quot;device-control&quot;</span></span><br><span class="line">        <span class="comment"># 自行替换为SAE中获取的内网访问地址，只需要域名，无需携带https://</span></span><br><span class="line">        IP = <span class="string">&quot;https://cn-hang-control-rcuipmgcxu.cn-hangzhou.sae.run&quot;</span></span><br><span class="line">        PORT = <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">        client = nacos.NacosClient(SERVER_ADDRESSES)</span><br><span class="line">        <span class="comment"># 向 Nacos 注册实例</span></span><br><span class="line">        client.add_naming_instance(SERVICE_NAME, IP, PORT, ephemeral=<span class="literal">False</span>, healthy=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;向 Nacos 注册成功，注册信息为: <span class="subst">&#123;SERVICE_NAME&#125;</span>, <span class="subst">&#123;IP&#125;</span>, <span class="subst">&#123;PORT&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;向 Nacos 注册失败，错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	同时修改requirements.txt文件，添加一行nacos-python-sdk依赖</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sanic~=24.6.0</span><br><span class="line">pymysql~=1.1.1</span><br><span class="line">websockets~=13.0.1</span><br><span class="line">requests~=2.32.3</span><br><span class="line">nacos-python-sdk==0.2</span><br></pre></td></tr></table></figure></div>

<p>​	修改代码后推送至Codeup，触发自动部署。打开Nacos UI界面即可验证是否注册</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795072dc47b8.png" alt="image-20250125230622890"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/67950729b6272.png" alt="image-20250125230658403"></p>
<p>​	在部署Nacos SAE应用实例的终端环境下执行以下命令，实现邮件发送FC函数计算的静态注册</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;http://127.0.0.1:8848/nacos/v2/cs/config?group=DEFAULT_GROUP&amp;dataId=serverless.fc.address.email_send&amp;content=https://fun-alaail-send-ylnkfxeuva.cn-hangzhou-vpc.fcapp.run&#x27;</span> </span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/679507299eaa8.png" alt="image-20250125230731235"></p>
<p>​	配置完成后观察Nacos UI界面，可发现<code>send_email</code>配置已成功向Nacos发布</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795072ac94e2.png" alt="image-20250125230838394"></p>
<p>​	同理，将CloudFlow工作流的触发接口以静态注册的方式进行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location --request POST</span><br><span class="line"><span class="string">&#x27;http://127.0.0.1:8848/nacos/v2/cs/config?</span></span><br><span class="line"><span class="string">group=DEFAULT_GROUP&amp;</span></span><br><span class="line"><span class="string">dataId=serverless.fc.address.cloudflare&amp;</span></span><br><span class="line"><span class="string">content=https://1237899087648526.eventbridge.cn-hangzhou-vpc.aliyuncs.com/webhook/putEvents?token=1ced1dfd257949609f8cd8861b0a914bba5389a992f04ac8a17616ba7e360318f463ec2f6fa14a79b4406e8ed277e4eea86fe72c7e384b82a8fa3825705a6a6d&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/67950738046de.png" alt="image-20250125231030892"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795072cd377a.png" alt="image-20250125231042340"></p>
<p>​	构建用户服务FC，同样配置相同的VPC、vSwitch，代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json, text</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;UserAdminFC&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nacos配置</span></span><br><span class="line">NACOS_URL = <span class="string">&quot;http://172.28.97.37:8848&quot;</span>  <span class="comment"># 自行替换为你的nacos内网地址</span></span><br><span class="line">SERVICE_NAME = <span class="string">&quot;user-admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在全局变量中存储user - admin服务的实例URL信息</span></span><br><span class="line">service_instance_url = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_service_instance_url</span>():</span><br><span class="line">        <span class="keyword">global</span> service_instance_url</span><br><span class="line">        <span class="keyword">if</span> service_instance_url:</span><br><span class="line">                <span class="keyword">return</span> service_instance_url</span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">                <span class="string">&quot;serviceName&quot;</span>: SERVICE_NAME,</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(</span><br><span class="line">                <span class="string">f&quot;<span class="subst">&#123;NACOS_URL&#125;</span>/nacos/v2/ns/instance/list&quot;</span>,</span><br><span class="line">        params=params)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                data = data = response.json().get(<span class="string">&quot;data&quot;</span>,</span><br><span class="line">                &#123;<span class="string">&#x27;hosts&#x27;</span>: []&#125;).get(<span class="string">&#x27;hosts&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> data <span class="keyword">and</span> data[<span class="number">0</span>]:</span><br><span class="line">                        service_instance_url = data[<span class="number">0</span>].get(<span class="string">&#x27;ip&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> service_instance_url</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/register/account&quot;</span>,methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">register_account</span>(<span class="params">request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用户注册&quot;&quot;&quot;</span></span><br><span class="line">        instance_url = get_service_instance_url()</span><br><span class="line">        <span class="keyword">if</span> instance_url:</span><br><span class="line">                url = <span class="string">f&quot;http://<span class="subst">&#123;instance_url&#125;</span>/register/account&quot;</span></span><br><span class="line">                response = requests.post(url, json=request.json)</span><br><span class="line">                <span class="keyword">return</span> json(response.json())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> text(<span class="string">&quot;Service instance not found&quot;</span>, status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&#x27;before_server_start&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">app, loop</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在启动时获取服务实例信息&quot;&quot;&quot;</span></span><br><span class="line">        instance_url = get_service_instance_url()</span><br><span class="line">        <span class="keyword">if</span> instance_url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Service instance not found&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;成功获取到服务实例地址：&quot;</span> + instance_url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	使用Apifox对User-Admin FC的用户注册接口(<code>POST /register/account</code>)发起请求，接口请求示例如下：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">POST https<span class="punctuation">:</span><span class="comment">//useradminfc-zovpsrnfjk.cn-hangzhou.fcapp.run/register/account</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yudou&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​	响应示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作执行成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;65086872090576958&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​	构建设备管理FC代码：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json, text</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;DeviceControlFC&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nacos配置</span></span><br><span class="line">NACOS_URL = <span class="string">&quot;http://172.28.97.37:8848&quot;</span>  <span class="comment"># 自行替换为你的nacos内网地址</span></span><br><span class="line">SERVICE_NAME = <span class="string">&quot;device-control&quot;</span>  <span class="comment"># 服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在全局变量中存储device - control服务的实例URL信息</span></span><br><span class="line">service_instance_url = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_service_instance_url</span>():</span><br><span class="line">    <span class="keyword">global</span> service_instance_url</span><br><span class="line">    <span class="keyword">if</span> service_instance_url:</span><br><span class="line">        <span class="keyword">return</span> service_instance_url</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;serviceName&quot;</span>: SERVICE_NAME,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(</span><br><span class="line">        <span class="string">f&quot;<span class="subst">&#123;NACOS_URL&#125;</span>/nacos/v2/ns/instance/list&quot;</span>,</span><br><span class="line">        params=params)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        data = response.json().get(<span class="string">&quot;data&quot;</span>, &#123;<span class="string">&#x27;hosts&#x27;</span>: []&#125;).get(<span class="string">&#x27;hosts&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> data[<span class="number">0</span>]:</span><br><span class="line">            service_instance_url = data[<span class="number">0</span>].get(<span class="string">&#x27;ip&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> service_instance_url</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/devices&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_device</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;设备添加&quot;&quot;&quot;</span></span><br><span class="line">    instance_url = get_service_instance_url()</span><br><span class="line">    <span class="keyword">if</span> instance_url:</span><br><span class="line">        url = <span class="string">f&quot;http://<span class="subst">&#123;instance_url&#125;</span>/devices&quot;</span></span><br><span class="line">        response = requests.post(url, json=request.json)</span><br><span class="line">        <span class="keyword">return</span> json(response.json())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;Service instance not found&quot;</span>, status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/devices&quot;</span>, ignore_body=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">query_device</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;设备查询&quot;&quot;&quot;</span></span><br><span class="line">    instance_url = get_service_instance_url()</span><br><span class="line">    <span class="keyword">if</span> instance_url:</span><br><span class="line">        url = <span class="string">f&quot;http://<span class="subst">&#123;instance_url&#125;</span>/devices&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;Authorization&quot;</span>: request.headers.get(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, json=request.json, headers=headers)</span><br><span class="line">        <span class="keyword">return</span> json(response.json())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;Service instance not found&quot;</span>, status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.listener(<span class="params"><span class="string">&#x27;before_server_start&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">app, loop</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在启动时获取服务实例信息&quot;&quot;&quot;</span></span><br><span class="line">    instance_url = get_service_instance_url()</span><br><span class="line">    <span class="keyword">if</span> instance_url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Service instance not found&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功获取到服务实例地址：&quot;</span> + instance_url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	同理，用Apifox对Device-Control FC的设备添加接口(<code>POST /devices</code>)发起请求，接口请求示例如下：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">POST https<span class="punctuation">:</span><span class="comment">//device-ontrolfc-rrubtancws.cn-hangzhou.fcapp.run/devices</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;温湿度设备&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;null&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SNTAH&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;passwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>

<p>​	接口响应示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取设备添加成功！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​	对设备查询接口(<code>GET /devices</code>)发起请求，接口请求示例如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET https://device-ontrolfc-rrubtancws.cn-hangzhou.fcapp.run/devices</span><br></pre></td></tr></table></figure></div>

<p>​	接口响应示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取设备信息成功！&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;温湿度设备&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;null&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SNTAH&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;passwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​	构建温湿度业务FC，示例代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic, response</span><br><span class="line"><span class="keyword">from</span> sanic.request <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;BizFC&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nacos配置</span></span><br><span class="line">NACOS_URL = <span class="string">&quot;http://172.28.97.37:8848&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_services_from_nacos</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从Nacos获取服务列表&quot;&quot;&quot;</span></span><br><span class="line">    response = requests.get(<span class="string">f&quot;<span class="subst">&#123;NACOS_URL&#125;</span>/nacos/v2/ns/service/list&quot;</span>)</span><br><span class="line">    data = response.json()</span><br><span class="line">    <span class="keyword">return</span> data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;services&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_instance_from_nacos</span>(<span class="params">service_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从Nacos获取指定服务的实例IP&quot;&quot;&quot;</span></span><br><span class="line">    response = requests.get(<span class="string">f&quot;<span class="subst">&#123;NACOS_URL&#125;</span>/nacos/v2/ns/instance/list?serviceName=<span class="subst">&#123;service_name&#125;</span>&quot;</span>)</span><br><span class="line">    data = response.json()</span><br><span class="line">    hosts = data[<span class="string">&#x27;data&#x27;</span>].get(<span class="string">&#x27;hosts&#x27;</span>, [])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hosts) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;hosts&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;ip&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_config_from_nacos</span>(<span class="params">data_id, group</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从Nacos获取指定配置&quot;&quot;&quot;</span></span><br><span class="line">    response = requests.get(<span class="string">f&quot;<span class="subst">&#123;NACOS_URL&#125;</span>/nacos/v2/cs/config?dataId=<span class="subst">&#123;data_id&#125;</span>&amp;group=<span class="subst">&#123;group&#125;</span>&quot;</span>)</span><br><span class="line">    data = response.json()</span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/getServices&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_services</span>(<span class="params">request: Request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取服务及其实例IP，并返回JSON格式的服务映射&quot;&quot;&quot;</span></span><br><span class="line">    services = get_services_from_nacos()</span><br><span class="line">    service_map = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> service <span class="keyword">in</span> services:</span><br><span class="line">        instance_ip = get_instance_from_nacos(service)</span><br><span class="line">        service_map[service.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)] = instance_ip</span><br><span class="line">    <span class="comment"># 从静态配置中读取</span></span><br><span class="line">    static_services = &#123;</span><br><span class="line">        <span class="string">&quot;message_url&quot;</span>: get_config_from_nacos(<span class="string">&quot;serverless.fc.address.email_send&quot;</span>, <span class="string">&quot;DEFAULT_GROUP&quot;</span>),</span><br><span class="line">        <span class="string">&quot;cloudflow_url&quot;</span>: get_config_from_nacos(<span class="string">&quot;serverless.fc.address.cloudflow&quot;</span>, <span class="string">&quot;DEFAULT_GROUP&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    service_map.update(static_services)</span><br><span class="line">    <span class="keyword">return</span> response.json(service_map)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure></div>

<p>​	使用Apifox对Biz FC的获取的所有服务地址接口(<code>GET /getServices</code>)发起请求，接口请求示例如下：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">GET  https<span class="punctuation">:</span><span class="comment">//bizfc-cpklnjfjoq.cn-hangzhou.fcapp.run/getServices</span></span><br></pre></td></tr></table></figure></div>

<p>​	接口响应示例：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;device_control&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cn-hang-control-rcuipmgcxu.cn-hangzhou.sae.run&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user_admin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cn-hanger-admin-hvryfblqme.cn-hangzhou.sae.run&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;config data not exist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cloudflow_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://1237899087648526.eventbridge.cn-hangzhou.aliyuncs.com/webhook/putEvents?token=1ced1dfd257949609f8cd8861b0a914bba5389a992f04ac8a17616ba7e360318f463ec2f6fa14a79b4406e8ed277e4eea86fe72c7e384b82a8fa3825705a6a6d&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795072e5d52f.png" alt="image-20250125233826811"></p>
<h4 id="9-3-遇到的主要问题、解决思路和收获"><a href="#9-3-遇到的主要问题、解决思路和收获" class="headerlink" title="9.3 遇到的主要问题、解决思路和收获"></a>9.3 遇到的主要问题、解决思路和收获</h4><p><strong>（❌）本实验未完成，Apifox测试用户服务FC和设备管理FC时返回的响应是错误的</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/6795073281187.png" alt="image-20250125234026794"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/67950737aa6da.png" alt="image-20250125234035534"></p>
<p>​	同样的，在出现错误后检查了一遍所有云产品VPC、vSwitch配置。发现没问题后选择在函数计算FC云端上进行测试。在测试user-admin FC和device-control FC时，从日志输出中看不出问题所在，于是我开通了实时日志功能</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/67950739b0486.png" alt="image-20250125234102110"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/67950731e15ec.png" alt="image-20250125234112269"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/25/67950733a60b4.png" alt="image-20250125234121706"></p>
<p>​	发现在日志中好像整个请求流程正常，日志打印“成功获取到服务器实例地址”，说明成功获取服务实例信息。且它的在线测试报错为404，与我在Apifox上的HTTP码500并不同，因此怀疑是返回响应的途中出现问题。但我无从下手debug了，询问阿里云在线客服也未能解决</p>
]]></content>
      <categories>
        <category>software-engineering</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Maven</tag>
        <tag>Spring Boot</tag>
        <tag>阿里云</tag>
        <tag>Serverless</tag>
        <tag>Nacos</tag>
        <tag>Git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
