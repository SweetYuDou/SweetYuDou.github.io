<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RE-NET</title>
    <url>/2024/11/01/RE-Net/</url>
    <content><![CDATA[<h3 id="《Recurrent-Event-Network-Autoregressive-Structure-Inference-over-Temporal-Knowledge-Graphs》论文解读"><a href="#《Recurrent-Event-Network-Autoregressive-Structure-Inference-over-Temporal-Knowledge-Graphs》论文解读" class="headerlink" title="《Recurrent Event Network: Autoregressive Structure Inference over Temporal Knowledge Graphs》论文解读"></a>《Recurrent Event Network: Autoregressive Structure Inference over Temporal Knowledge Graphs》论文解读</h3><h4 id="RGCN"><a href="#RGCN" class="headerlink" title="RGCN"></a>RGCN</h4><p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238bf47b.png" alt="RGCN_formula"></p>
<p>W<sub>r</sub><sup>(l)</sup>是某一个特定的关系r（如弹劾，主动建交等）在第l层GCN中的权重矩阵，每一个不同的关系r对应其对应的权重矩阵，比如r<sub>1</sub>对应W<sub>1</sub>这样</p>
<p>h<sub>o</sub><sup>(l)</sup>是某一个特定的客体（object）在第l层GCN中的隐藏表示&#x2F;特征向量（hidden state&#x2F;embedding），也就是当前s实体所指向的那个o客体，<em><strong>h<sub>s</sub><sup>(l)</sup>同理</strong></em></p>
<p>W<sub>o</sub><sup>(l)</sup>是自环权重矩阵，意思就是它会与节点s自身的特征一直相乘然后更新到下一层再继续相乘</p>
<p>N<sub>t</sub><sup>(s,r)</sup>表示在时间戳t（timestamp）这个时间下的节点s通过关系r的邻居节点集合（Neighborhood），<em><strong>N<sub>t</sub><sup>(s)</sup>同理</strong></em></p>
<p>c<sub>s</sub>是归一化常数，体现在公式里就是：num(o) * num(r)，就是当前t的实体s对应的客体o的个数乘上当前t这个s对应的关系r的个数，包含了多少个邻居的信息就平均掉。<strong>简单来说，就是当前t的实体s的所有邻居个数</strong></p>
<p>RGCN聚合器的作用在于：聚合节点s的邻居节点的信息。结合公式解读一下就是：对于节点s，RGCN在更新节点特征同时考虑<strong>节点自身的特征</strong><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238ab7d7.png" alt="self_loop">和<strong>其邻居节点的特征</strong><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238b540f.png" alt="self_rel">，以及它们之间的关系类型（指不同关系对应不同权重矩阵)。</p>
<h4 id="RGCN模块代码如下："><a href="#RGCN模块代码如下：" class="headerlink" title="RGCN模块代码如下："></a>RGCN模块代码如下：</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RGCNLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_feat, out_feat, bias=<span class="literal">None</span>, activation=<span class="literal">None</span>, self_loop=<span class="literal">False</span>, dropout=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(RGCNLayer, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line">        <span class="variable language_">self</span>.activation = activation</span><br><span class="line">        <span class="variable language_">self</span>.self_loop = self_loop</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.bias:</span><br><span class="line">            <span class="variable language_">self</span>.bias = nn.Parameter(torch.Tensor(out_feat))</span><br><span class="line">            nn.init.xavier_uniform_(<span class="variable language_">self</span>.bias,  gain=nn.init.calculate_gain(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">            <span class="comment"># xavier_uniform_：初始化，用于保证输入输出的方差相同。可以避免随着层数的传递，输入过大而梯度消失或输入过小而失去非线性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 权重矩阵</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">            <span class="comment"># 回环权重矩阵</span></span><br><span class="line">            <span class="comment"># input_feature,output_feature</span></span><br><span class="line">            <span class="variable language_">self</span>.loop_weight = nn.Parameter(torch.Tensor(in_feat, out_feat))</span><br><span class="line">            nn.init.xavier_uniform_(<span class="variable language_">self</span>.loop_weight, gain=nn.init.calculate_gain(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dropout:</span><br><span class="line">            <span class="variable language_">self</span>.dropout = nn.Dropout(dropout)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.dropout = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">propagate</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            g是graph，.ndata[&#x27;h&#x27;]是PyTorch DGL图（Graph）对象的一个节点数据属性，它表示图中的节点特征向量。</span></span><br><span class="line"><span class="string">            在 GNNs 中，节点特征向量通常由两部分组成：一部分是静态的特征，如节点类别、属性等；</span></span><br><span class="line"><span class="string">            另一部分是动态的特征，如与节点相邻的节点数量、节点之间的边权重等。</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            loop_message = torch.mm(g.ndata[<span class="string">&#x27;h&#x27;</span>], <span class="variable language_">self</span>.loop_weight)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                loop_message = <span class="variable language_">self</span>.dropout(loop_message)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.propagate(g, reverse)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 应用bias偏移和激活函数</span></span><br><span class="line">        node_repr = g.ndata[<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.bias:</span><br><span class="line">            node_repr = node_repr + <span class="variable language_">self</span>.bias</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">            node_repr = node_repr + loop_message</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.activation:</span><br><span class="line">            node_repr = <span class="variable language_">self</span>.activation(node_repr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新节点特征向量</span></span><br><span class="line">        g.ndata[<span class="string">&#x27;h&#x27;</span>] = node_repr</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RGCNBlockLayer</span>(<span class="title class_ inherited__">RGCNLayer</span>):  <span class="comment"># RGCN块层</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_feat, out_feat, num_rels, num_bases, bias=<span class="literal">None</span>, activation=<span class="literal">None</span>, self_loop=<span class="literal">False</span>, dropout=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(RGCNBlockLayer, <span class="variable language_">self</span>).__init__(in_feat, </span><br><span class="line">                                             out_feat, </span><br><span class="line">                                             bias,</span><br><span class="line">                                             activation, </span><br><span class="line">                                             self_loop=self_loop,</span><br><span class="line">                                             dropout=dropout)</span><br><span class="line">        <span class="variable language_">self</span>.num_rels = num_rels</span><br><span class="line">        <span class="variable language_">self</span>.num_bases = num_bases</span><br><span class="line">        <span class="keyword">assert</span> <span class="variable language_">self</span>.num_bases &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.out_feat = out_feat</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.submat_in = in_feat // <span class="variable language_">self</span>.num_bases</span><br><span class="line">        <span class="variable language_">self</span>.submat_out = out_feat // <span class="variable language_">self</span>.num_bases</span><br><span class="line"></span><br><span class="line">        <span class="comment"># assuming in_feat and out_feat are both divisible by num_bases</span></span><br><span class="line">        <span class="comment"># if self.num_rels == 2:</span></span><br><span class="line">        <span class="comment">#     self.in_feat = in_feat</span></span><br><span class="line">        <span class="comment">#     self.weight = nn.Parameter(torch.Tensor(</span></span><br><span class="line">        <span class="comment">#         self.num_rels, in_feat, out_feat))</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="variable language_">self</span>.weight = nn.Parameter(torch.Tensor(<span class="variable language_">self</span>.num_rels, <span class="variable language_">self</span>.num_bases * <span class="variable language_">self</span>.submat_in * <span class="variable language_">self</span>.submat_out))</span><br><span class="line">        nn.init.xavier_uniform_(<span class="variable language_">self</span>.weight, gain=nn.init.calculate_gain(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msg_func</span>(<span class="params">self, edges, reverse</span>):  <span class="comment"># 节点和权重相乘，再转化为输出格式</span></span><br><span class="line">        <span class="keyword">if</span> reverse:</span><br><span class="line">            <span class="comment"># edges.data[&#x27;type_o&#x27;]：表示目标节点所属的关系的类型。具体哪个关系就对应它的权重矩阵</span></span><br><span class="line">            weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_o&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_s&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        edges.src[&#x27;h&#x27;]：表示源节点的特征向量。</span></span><br><span class="line"><span class="string">        它是一个大小为 (num_nodes, submat_in) 的tensor，其中 num_nodes 表示图中的节点数。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        node = edges.src[<span class="string">&#x27;h&#x27;</span>].view(-<span class="number">1</span>, <span class="number">1</span>, <span class="variable language_">self</span>.submat_in)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        msg：表示消息传递的结果。</span></span><br><span class="line"><span class="string">        它是一个大小为 (num_edges, out_feat) 的tensor，其中out_feat 表示输出特征向量的维度。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        msg = torch.bmm(node, weight).view(-<span class="number">1</span>, <span class="variable language_">self</span>.out_feat)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">propagate</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">        g.update_all(<span class="keyword">lambda</span> x: <span class="variable language_">self</span>.msg_func(x, reverse), fn.<span class="built_in">sum</span>(msg=<span class="string">&#x27;msg&#x27;</span>, out=<span class="string">&#x27;h&#x27;</span>), <span class="variable language_">self</span>.apply_func)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">apply_func</span>(<span class="params">self, nodes</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;h&#x27;</span>: nodes.data[<span class="string">&#x27;h&#x27;</span>] * nodes.data[<span class="string">&#x27;norm&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure></div>

<p>结合代码来看公式，是<img lazyload src="/images/loading.svg" data-src="/RE-Net/67376238ab7d7.png" alt="self_loop"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">   		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         先让节点特征向量与自环权重矩阵相乘+dropout</span></span><br><span class="line"><span class="string">         &#x27;&#x27;&#x27;</span></span><br><span class="line">loop_message = torch.mm(g.ndata[<span class="string">&#x27;h&#x27;</span>], <span class="variable language_">self</span>.loop_weight)</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             loop_message = <span class="variable language_">self</span>.dropout(loop_message)</span><br><span class="line">         <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         再把偏移、乘积、激活函数加在原有的节点特征向量上</span></span><br><span class="line"><span class="string">         允许每一层都保留前一层的信息，有点像ResNet的思想</span></span><br><span class="line"><span class="string">         &#x27;&#x27;&#x27;</span></span><br><span class="line">	node_repr = g.ndata[<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.bias:</span><br><span class="line">             node_repr = node_repr + <span class="variable language_">self</span>.bias</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.self_loop:</span><br><span class="line">             node_repr = node_repr + loop_message</span><br><span class="line">         <span class="keyword">if</span> <span class="variable language_">self</span>.activation:</span><br><span class="line">             node_repr = <span class="variable language_">self</span>.activation(node_repr)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">把最后的节点表示（node_repr）作为该层节点特征向量的输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">         g.ndata[<span class="string">&#x27;h&#x27;</span>] = node_repr</span><br><span class="line">         <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/RE-Net/67376238b540f.png" alt="self_rel">是</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">def</span> <span class="title function_">msg_func</span>(<span class="params">self, edges, reverse</span>): </span><br><span class="line">      <span class="keyword">if</span> reverse:</span><br><span class="line">          weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_o&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          weight = <span class="variable language_">self</span>.weight.index_select(<span class="number">0</span>, edges.data[<span class="string">&#x27;type_s&#x27;</span>]).view(-<span class="number">1</span>, <span class="variable language_">self</span>.submat_in, <span class="variable language_">self</span>.submat_out)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">先找到目标节点所属的关系的类型（比如：弹劾、被弹劾；选举、被选举）</span></span><br><span class="line"><span class="string">拿到该关系所对应的权重矩阵</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">      node = edges.src[<span class="string">&#x27;h&#x27;</span>].view(-<span class="number">1</span>, <span class="number">1</span>, <span class="variable language_">self</span>.submat_in)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">将源节点的特征向量与权重相乘</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">      msg = torch.bmm(node, weight).view(-<span class="number">1</span>, <span class="variable language_">self</span>.out_feat)</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">propagate</span>(<span class="params">self, g, reverse</span>):</span><br><span class="line">      g.update_all(<span class="keyword">lambda</span> x: <span class="variable language_">self</span>.msg_func(x, reverse), fn.<span class="built_in">sum</span>(msg=<span class="string">&#x27;msg&#x27;</span>, out=<span class="string">&#x27;h&#x27;</span>), <span class="variable language_">self</span>.apply_func)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">把该源节点的所有邻居节点的msg结果相加聚合</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">apply_func</span>(<span class="params">self, nodes</span>):</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="string">&#x27;h&#x27;</span>: nodes.data[<span class="string">&#x27;h&#x27;</span>] * nodes.data[<span class="string">&#x27;norm&#x27;</span>]&#125;</span><br><span class="line">  	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  	最后乘上归一化常数nodes.data[&#x27;norm&#x27;]</span></span><br><span class="line"><span class="string">  	&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>RGCN捕捉多跳邻居的信息：通过多次应用图卷积操作实现</p>
<ul>
<li>在第一次迭代中，每个节点聚合来自其直接邻居的信息</li>
<li>在第二次迭代中，每个节点合来自其邻居的邻居（即第二跳邻居）的信息</li>
</ul>
<h4 id="RE-Net架构图解读"><a href="#RE-Net架构图解读" class="headerlink" title="RE-Net架构图解读"></a>RE-Net架构图解读</h4><p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/67376238ebfd3.png" alt="RE-Net_architecture"></p>
<p>任务：预测时间戳t中的三元组</p>
<p>已知：过去几个时间步的图（架构图举例为3个时间步）</p>
<p>RE-Net_global对整个知识图谱（能观察到的图，架构图中整个图谱为3个时间步的图）进行编码，给出全局嵌入表示（global_emb）。在预测时给出预测时间戳t的主体、客体分布以及更新后的全局嵌入表示</p>
<p>RE-Net(train)：将可观察到的局部图中的s,r和global_emb等放入Aggregator聚合器（RGCN）当中，聚合器的输出结果为两个序列s_packed_input,s_packed_input_r分别放入encoder,encoder_r中，编码实体表示和关系表示，RE-Net类的self.encoder被定义为nn.GRU，最后分别送入线性层self.linear,self.linear_r(nn.linear)和dropout层预测客体和关系并分别计算损失</p>
<p>RE-Net(valid,test)：RE-Net_global预测时间戳t的主体，客体分布后采样前self.num_k个，更新（主体和客体的列表、索引、历史交互缓存），构建新的时间点的图，更新图字典（graph_dict）和全局嵌入表示（global_emb）。再重复以上操作↑</p>
]]></content>
      <categories>
        <category>deep-learning</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2024/11/14/Docker/</url>
    <content><![CDATA[<ul>
<li>docker镜像源（加速地址）是国内的源来拉镜像，可能有一些镜像没有，代理就是从Dockerhub拉。<strong>你拉的镜像如果是<em>Dockerhub</em>的，并且国内镜像源没有，那镜像源也不好使，只能老老实实配好代理</strong>。阿里云ECS可以使用阿里云镜像加速器，<code>/etc/docker/daemon.json</code>如下配置即可，不要加其他源：</li>
</ul>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://***.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>本地访问阿里云ECS的网页时，若出现无法访问的问题，可以检查该ECS配置的安全组是否开放HTTP（80）、HTTPS（443）端口。</li>
<li>用clash来给服务器<strong>配置代理</strong>，可以参考<a class="link" href="https://github.com/nelvko/clash-for-linux-install?tab=readme-ov-file">nelvko&#x2F;clash-for-linux-install: 优雅地部署基于 Clash 的代理环境 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，其中订阅就是一个链接，可以从机场网站上找，类似这样的：</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/15/673762390d8ea.png" alt="subscription"></p>
<p>我这里用的是clash，就复制clash订阅链接就好了。部署完clash后，服务器开放端口7890作为代理接口，来访问代理服务器。在服务器终端设置相关环境变量：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 </span><br></pre></td></tr></table></figure></div>

<p>由于配置代理是为了docker服务，所以还要编辑Docker系统的服务配置文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure></div>

<p>在proxy.conf中配置以下内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://127.0.0.1:7890&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>最后重启docker：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<p>不出意外应该成功了，可以尝试拉取一些之前拉取失败的镜像来验证一下</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/20/673d70d56e2f1.png" alt="traffic"></p>
<ul>
<li>阿里云云数据传输的流量<strong>按量计算，两天就花了151.05CNY…TuT</strong>，目录价因子都是流出地域，我用Xftp7把ECS上的文件传到本地也用不到100多个G吧？暂时还没想到是为什么，只好先暂停服务了</li>
</ul>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>学习笔记</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记</title>
    <url>/2024/11/16/Maven/</url>
    <content><![CDATA[<ul>
<li>Maven远程仓库默认为Maven Central Repository，可以在<code>/conf/settings.xml</code>中配置远程镜像仓库为国内阿里云镜像仓库，提高Jar包下载的速度和稳定性。配置settings.xml完成后保存退出。</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"># 在settings.xml 160行处添加镜像源，需要保证镜像源标签在mirror的第一个</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/16/67377c04abc81.png" alt="image-20241116005159364">像这样，镜像源得在前，否则会报错</p>
<ul>
<li>IntelliJ IDEA中项目代码若出现无法解析符号“xxx”报错且鼠标指针移到报错的符号（被高亮为红色）上没有提示”导入类’xxx‘时“，可以尝试点击右侧”更多操作“</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/25/6743503f889cd.png" alt="更多操作"></p>
<p>点击“添加Maven依赖项”</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/25/6743503f852b2.png" alt="添加Maven依赖项"></p>
<p>再选择合适的版本</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/25/6743503f5ecf4.png" alt="选择合适版本"></p>
<p>最后再导入类，即可解决报错</p>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>学习笔记</tag>
        <tag>Spring Boot</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>对FPS游戏作弊工具的一些理解</title>
    <url>/2024/11/25/DMA/</url>
    <content><![CDATA[<p>​	这两天看到了个几张图片，据说是超越了DMA的作弊工具，看完后心血来潮想研究一下现在的一些游戏外挂的原理。</p>
<ul>
<li>首先是普通外挂软件。游戏数据大部分都存在本地内存中，比如敌人位置、血量、技能等。正常情况下你肯定看不到，但外挂软件直接访问本地内存，并将这些数据可视化。比如一些透视挂，就可以通过从本地内存中读取的数据来显示敌人所在位置等信息。游戏通常会拒绝这些外挂软件访问游戏数据，稍微好一点的外挂软件就会伪装成各种正规的软件来访问，但这种普通的内存挂基本都会封，只是时间问题而已</li>
<li>而DMA可以优化这一点。DMA全称为Direct Memory Access，即直接存储器访问。DMA能够做到<strong>在数据传输期间</strong>越过CPU来访问内存，那么就可以通过DMA把本地电脑的内存复制一份到另一台电脑上，然后在另一台电脑上运行外挂软件来实现外挂功能（如透视），而外挂软件完全不访问运行在本地的游戏数据，所以很难封禁。但是由于现代操作系统（如 Windows、Linux 等）都有复杂的内存管理机制。操作系统会对内存进行虚拟化，将物理内存映射到不同的虚拟地址空间。对于 DMA 访问内存，<strong>DMA需要CPU去解析内存再传输给DMA</strong>，它不能直接使用物理内存地址，因为操作系统可能已经对这些物理地址进行了重新映射。如果直接使用物理地址访问内存，可能会访问到错误的区域，因为它不知道操作系统的内存映射规则。因此DMA虽然可以避开CPU，但绕不过操作系统，存在被操作系统检测到的可能</li>
<li>于是现在又有了HMTT来进一步优化。HMTT全称为Hybrid Memory Trace Tool，即混合内存跟踪工具。HMTT通过插在DDR4接口的内存上，使用DIMM-snooping机制监听内存总线，绕开了CPU。HMTT在读取内存时<strong>系统内部没有任何痕迹</strong>，可以理解为内存中间人，可以在数据从一个地方传输到另一个地方的过程中介入并获取数据。因此HMTT也可以在将内存数据发送给主板前复制一份给另一台电脑，且无法被操作系统检测到。HMTT是纯物理层面的解决方案，不经过操作系统，因此不存在操作系统层面的检测可能╮(╯▽╰)╭</li>
</ul>
<p>将来问世的各种硬件各种技术难免会被用在研发外挂上，这是不可避免的。在我看来，其实DMA就已经很难查封了，没必要因为新的外挂技术而沮丧，反正反作弊都查不出来🤣🤣🤣</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/26/6744b13a9bc43.jpg"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/26/6744b13a9ed3e.jpg"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2024/11/26/6744b13aa23bb.jpg"></p>
<p>这三张图是我在冲浪时看到的，值得一提的是：第一张图提到的DMA和HMTT的区别是有误的，DMA不需要通过CPU来访问内存，第二张图“DMA获取内存的方式”也是错的，不知道是不是为了销售故意这样做的😏</p>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>DMA</tag>
        <tag>HMTT</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN等网络优化工具的一些理解</title>
    <url>/2024/11/30/vpn/</url>
    <content><![CDATA[<ul>
<li>VPN全称”Virtual Private Network”，也就是虚拟专用网络。VPN提供安全的远程访问和隐私保护，通过建立的“虚拟隧道”在公网上传输，就像是把你的数据包裹在一个新的 “信封” 里，这个 “信封” 在公网上传输，到达目的地后再把原始数据解封装。</li>
</ul>
<p>​	用户使用VPN访问的流程为：</p>
<ol>
<li><p>用户先通过VPN客户端软件连接到VPN服务器</p>
</li>
<li><p>用户的所有网络流量都会通过VPN服务器转发</p>
</li>
<li><p>VPN服务器会对用户的网络数据进行加密,确保传输过程的安全性</p>
</li>
<li><p>用户的IP地址也会被VPN服务器的IP地址所替换,从而隐藏了用户的真实IP</p>
<p>所以在我们使用VPN进行翻墙的时候，例如使用了美国节点，那么访问YouTube时就是以美国节点的IP进行访问。而整个过程由于VPN的加密，防火墙不知道你访问了什么，因此无法进行屏蔽，保障访问过程的顺利进行。</p>
</li>
</ol>
<ul>
<li>游戏加速器的原理是：通过优化路由，减少网络拥堵等来优化服务器连接。游戏加速器通常会有自己的网络节点，这些节点分布在不同地区，靠近游戏服务器。它会根据你的位置和游戏服务器位置，选择最优的网络传输路径。例如，它可能会利用一些专用的网络线路或者优化网络协议，将你的游戏数据通过这些优化后的路径进行传输。加速器会对游戏数据包进行识别和优先处理，有点像为游戏数据开辟了一条 “绿色通道”，使游戏数据能够更快地传输。</li>
<li>个人理解：比如在访问外网时，VPN服务器可以看成一种连接更加稳定且更安全的代理服务器。就像clash中可以设置全局代理和智能代理一样，前者是将所有网络请求都通过代理服务器，而后者会根据你设置的规则等进行选择性地代理。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/vpn/67691fc6b28bf.png" alt="image-20241223163112150"></p>
]]></content>
      <categories>
        <category>chit-chat</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>系统中间件与云虚拟化实践</title>
    <url>/2025/01/13/yjs/</url>
    <content><![CDATA[<h3 id="1-基于阿里云云效Codeup的Git代码管理"><a href="#1-基于阿里云云效Codeup的Git代码管理" class="headerlink" title="1. 基于阿里云云效Codeup的Git代码管理"></a>1. 基于阿里云云效Codeup的Git代码管理</h3><h4 id="1-1-实验目标与相关知识技能"><a href="#1-1-实验目标与相关知识技能" class="headerlink" title="1.1 实验目标与相关知识技能"></a>1.1 <strong>实验目标与相关知识技能</strong></h4><p>•     了解Git常用指令及其基本原理，如：git push,git pull,git init,git add,git config,git branch,git commit等</p>
<p>•     了解一些常见的Linux系统命令，如：cd,cat,touch等</p>
<p>•     学会使用ssh方式访问仓库，减少不必要的交互以提高效率</p>
<h4 id="1-2-实验步骤与对应成果展示"><a href="#1-2-实验步骤与对应成果展示" class="headerlink" title="1.2 实验步骤与对应成果展示"></a>1.2 <strong>实验步骤与对应成果展示</strong></h4><p>​	创建test.py文件，暂存至暂存区后观察文件状态，提交至本地仓库后观察文件状态，推送至远程仓库并观察文件状态</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &quot;import json&quot; &gt; test.py  #创建test.py</span><br><span class="line">git add test.py  #暂存test.py</span><br><span class="line">git status  #观察文件状态</span><br><span class="line">git commit -m &quot;feat(test.py):引入json&quot;  #提交至本地仓库</span><br><span class="line">git status  #观察文件状态</span><br><span class="line">git push origin master  #推送至远程仓库</span><br><span class="line">git status  #观察文件状态</span><br></pre></td></tr></table></figure></div>

<p>​	至此，已完成暂存、提交、推送三个基本操作，本地代码已同步至云端Codeup</p>
<p>​	修改test.py文件后观察文件状态，暂存修改后的文件并观察文件状态，添加<code>&quot;import re&quot;</code>至<code>test.py</code>中，观察文件状态，提交至本地仓库后观察文件状态，推送至云端仓库后观察文件状态，查看历史提交记录</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &quot;import random&quot; &gt; test.py  #修正test.py</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git status</span><br><span class="line"><span class="built_in">echo</span> &quot;import re&quot; &gt;&gt; test.py</span><br><span class="line">git status</span><br><span class="line">git commit -a -m &quot;feat(test.py)：引入random，re&quot;</span><br><span class="line">git status</span><br><span class="line">git push</span><br><span class="line">git status</span><br><span class="line">git log  #git log用于查看历史提交记录 </span><br></pre></td></tr></table></figure></div>

<p>​	修改<code>test.py</code>，暂存文件<code>test.py</code>，取消暂存<code>test.py</code>，提交至本地仓库，撤销提交，再次提交至本地仓库，推送至云端仓库，本地回滚后再次强行推送至远程仓库，期间不断<code>git status</code>观察文件状态</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &quot;<span class="built_in">print</span>(&#x27;Hello world&#x27;)&quot; &gt;&gt; test.py</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> --staged test.py  #将本地仓库HEAD指向的版本复制到暂存区</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git reset HEAD test.py</span><br><span class="line">git commit -m &quot;feat(test.py)：打印Hello World&quot;</span><br><span class="line">git status</span><br><span class="line">git reset HEAD~  #HEAD~是HEAD的父节点，设置HEAD指向当前提交的上一次提交</span><br><span class="line">git status</span><br><span class="line">git commit -a -m &quot;feat(test.py)：打印Hello World&quot;</span><br><span class="line">git push origin master</span><br><span class="line">git reset HEAD~</span><br><span class="line">git push -f origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>​	取消对<code>test.py</code>的跟踪并恢复，与最近一次修改前的<code>test.py</code>进行比较，暂存<code>test.py</code>至暂存区，删除<code>test.py</code>，查看<code>test.py</code>的内容，从暂存区中恢复<code>test.py</code>，查看test.py内容，删除<code>test.py</code>，再强制删除已暂存的<code>test.py</code>，尝试恢复被删除的文件，查看<code>test.py</code>是否被恢复，从暂存区中恢复<code>test.py</code>，查看<code>test.py</code>的内容</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">Plain Text</span><br><span class="line">git rm --cached test.py  #取消对test.py的跟踪</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git diff test.py</span><br><span class="line">git status</span><br><span class="line">git add test.py</span><br><span class="line">git status</span><br><span class="line">rm test.py  #删除test.py</span><br><span class="line">cat test.py  #在终端中打印test.py的内容</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> test.py</span><br><span class="line">cat test.py</span><br><span class="line">git status</span><br><span class="line">git rm test.py</span><br><span class="line">git rm -f test.py</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> test.py</span><br><span class="line">git <span class="built_in">restore</span> --staged test.py</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">restore</span> test.py</span><br><span class="line">cat test.py</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6783edb9378ba.png" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6783edb8d428c.png" alt="img"></p>
<h4 id="1-3-遇到的主要问题、解决思路和收获"><a href="#1-3-遇到的主要问题、解决思路和收获" class="headerlink" title="1.3 遇到的主要问题、解决思路和收获"></a>1.3 <strong>遇到的主要问题、解决思路和收获</strong></h4><p>​	该实验暂未遇到问题</p>
<h3 id="2-基于阿里云-ECS-与-ACR-的容器镜像管理"><a href="#2-基于阿里云-ECS-与-ACR-的容器镜像管理" class="headerlink" title="2. 基于阿里云 ECS 与 ACR 的容器镜像管理"></a>2. 基于阿里云 ECS 与 ACR 的容器镜像管理</h3><h4 id="2-1-实验目标与相关知识技能"><a href="#2-1-实验目标与相关知识技能" class="headerlink" title="2.1 实验目标与相关知识技能"></a>2.1 实验目标与相关知识技能</h4><p>•     掌握ECS的基本操作，能较为熟练地使用Linux平台，如ECS远程连接，Xftp 7传输文件等</p>
<p>•     掌握Docker的常用命令，包括拉取镜像，启动容器，查看镜像，删除镜像，暂停容器等</p>
<p>•     学会撰写Dockerfile文件来构建镜像，并基于阿里云ACR完成镜像的pull和push</p>
<h3 id="2-2-实验步骤与对应成果展示"><a href="#2-2-实验步骤与对应成果展示" class="headerlink" title="2.2 实验步骤与对应成果展示"></a>2.2 实验步骤与对应成果展示</h3><p>​	使用<code>docker pull</code>拉取<code>nginx</code>镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker images</code>查看已拉取的镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker run</code>运行<code>docker</code>容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用docker ps查看当前运行的容器信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps  </span><br></pre></td></tr></table></figure></div>

<p>​	此时可用本地浏览器访问该ECS服务器公网，即<code>http://&lt;ECS公网IP&gt;</code>以此验证容器是否正常运行</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6785313586e43.jpg" alt="img"></p>
<p>​	将Nginx服务的配置文件、日志文件及Web服务的根目录分别建立持久化映射，可以理解为让容器中的目录与宿主目录进行同步</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nginx/html</span><br><span class="line"><span class="comment"># -p --parents：如果路径中任意一级父目录不存在，则创建</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /opt/docker/nginx/</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d /opt/docker/nginx/</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /opt/docker/nginx/</span><br></pre></td></tr></table></figure></div>

<p>​	现在要想Nginx服务使用持久化存储的数据，需要先停止再删除当前运行的nginx容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line">docker ps -a <span class="comment">#观察是否删除成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	重新执行<code>docker run</code>，同时配置好相关参数</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -v, --volume list：挂在目录，&lt;宿主目录&gt;:&lt;容器目录&gt;</span></span><br><span class="line">docker run -d --restart=always \</span><br><span class="line">            --name nginx \</span><br><span class="line">            -p 80:80 \</span><br><span class="line">            -v /opt/docker/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">            -v /opt/docker/nginx/html:/usr/share/nginx/html \</span><br><span class="line">            -v /opt/docker/nginx/logs:/var/log/nginx \</span><br><span class="line">            nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker stop</code>,<code>docker start</code>进行练习</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker start nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>curl</code>命令获取网页内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:80  <span class="comment">#在ECS终端上输入，所以地址是127.0.0.1</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker exec</code>命令进入容器。该命令定义为在容器内部运行一条指定命令，可以指定命令为Shell程序，如<code>/bin/bash</code>，配合参数<code>-it</code>，可以实现进入容器进行命令行交互式操作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx /bin/bash</span><br><span class="line"><span class="comment"># -i --interactive，保持交互模式</span></span><br><span class="line"><span class="comment"># -t --tty，分配一个伪终端（模拟终端）</span></span><br><span class="line"><span class="comment"># nginx，容器名称</span></span><br><span class="line"><span class="comment"># /bin/bash，待执行的命令，进入bash shell</span></span><br></pre></td></tr></table></figure></div>

<p>​	进入容器后，在nginx服务的Web服务的根目录中创建<code>test.html</code>文件。由于容器本身不支持<code>vim</code>，因此用<code>echo</code>命令进行编写，最后用<code>exit</code>命令退出容器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;Hello,world&lt;/h1&gt;&quot;</span> &gt; test.html</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">ls</span> /opt/docker/nginx/html  <span class="comment">#查看是否成功持久化储存到宿主系统</span></span><br><span class="line">curl 127.0.0.1:80/test.html  </span><br></pre></td></tr></table></figure></div>

<p>​	除了curl命令，一样可以用浏览器访问<code>http://&lt;ECS公网地址&gt;/test.html</code>来验证</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/6785313522372.jpg" alt="img"></p>
<p>​	使用<code>docker logs</code>查看容器日志，可以通过此方法来判断容器是否正常工作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs nginx</span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>dcoker rmi</code>删除不必要的容器镜像时，要先删除使用该镜像的容器，想删除容器又得先停止容器实例运行。故删除镜像的顺序如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line">docker rmi nginx</span><br><span class="line">docker images  <span class="comment">#判断镜像是否删除成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	构建Docker容器镜像可以通过编写并运行Dockerfile文件来实现，一般而言，Dockerfile的文件指令逻辑应按照以下模式建立：选择合适的基础镜像、安装基础工具与依赖、添加其他应用、清理缓存、声明镜像端口暴露情况、设置默认启动命令</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Ubuntu作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;&lt;yud0u@qq.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx及Python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    nginx \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-distutils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理apt软件包缓存    </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">[<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用docker build命令创建容器镜像（最好在Dockerfile同一目录下运行）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -t, tag：镜像名称（REPOSITORY：TAG）</span></span><br><span class="line"><span class="comment"># npu：Nginx Python Ubuntu，自定义镜像名称</span></span><br><span class="line"><span class="comment"># .：PATH，执行命令的上下文路径，构造过程中可以引用该上下文中的任何文件</span></span><br><span class="line">docker build -t npu .</span><br><span class="line">docker images  <span class="comment">#查看镜像是否创建成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	运行该镜像，检测Nginx服务；进入容器后检测Python解析能力</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name npu -p 80:80 npu</span><br><span class="line">curl 127.0.0.1</span><br><span class="line">docker <span class="built_in">exec</span> -it npu /bin/bash</span><br><span class="line">(nginx)python3</span><br><span class="line"><span class="built_in">exit</span>()</span><br><span class="line">(nginx)<span class="built_in">exit</span></span><br></pre></td></tr></table></figure></div>

<p>​	将创建的npu镜像推送至ACR，在此之前先在ACR控制台创建镜像仓库<code>npu</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker login --username=鱼豆YuDou crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com</span><br><span class="line">docker tag [ImageId] crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:[镜像版本号]</span><br><span class="line">docker push crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	推送成功后可以在该镜像仓库中查看提交记录</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/678531347f773.jpg" alt="img"></p>
<p>​	从ACR中拉取容器镜像进行测试，需要先删除本地容器及其镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop npu</span><br><span class="line">docker <span class="built_in">rm</span> npu</span><br><span class="line">docker rmi npu</span><br><span class="line">docker rmi crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu</span><br><span class="line">docker images  <span class="comment">#查看镜像是否删除成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	删除后再进行拉取操作，并进行测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:latest</span><br><span class="line">docker run -d --name npu -p 80:80 crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/npu:latest</span><br><span class="line">curl 127.0.0.1  <span class="comment">#查看容器是否正常运行</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-4-遇到的主要问题、解决思路和收获"><a href="#2-4-遇到的主要问题、解决思路和收获" class="headerlink" title="2.4 遇到的主要问题、解决思路和收获"></a>2.4 遇到的主要问题、解决思路和收获</h4><p>​	<strong>（✅）本实验遇到的最大问题为：docker拉取镜像超时。</strong></p>
<p>​	为解决此问题，共尝试了三种方法：</p>
<ol>
<li>（❌）在<code>/etc/docker/daemon.json</code>下配置docker镜像源，包括各种华为云等镜像源，配置方法参考以下链接<a class="link" href="https://blog.csdn.net/weixin_50160384/article/details/139861337%EF%BC%8C%E4%BD%86%E5%9D%87%E4%BB%A5%E5%A4%B1%E8%B4%A5%E5%91%8A%E7%BB%88">https://blog.csdn.net/weixin_50160384/article/details/139861337，但均以失败告终 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>（❌）在<code>/etc/docker/daemon.json</code>下配置阿里云镜像加速器，在ACR中获取加速器地址，并按如下方式配置，不添加其他镜像源，但效果并不稳定，有时可以拉取成功有时又不行</li>
</ol>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://***.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/13/67853134866b3.png" alt="image-20250113233043464"></p>
<ol start="3">
<li>（✅）为ECS服务器配置代理，在网上阅读了许多文章后，我将具体方法总结在我的个人博客上：<a class="link" href="https://sweetyudou.github.io/2024/11/14/Docker/%E3%80%82%E7%AE%80%E8%80%8C%E8%A8%80%E4%B9%8B%EF%BC%8C%E6%88%91%E4%BD%BF%E7%94%A8clash%E6%88%90%E5%8A%9F%E4%B8%BAECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%88%90%E5%8A%9F%E5%81%9A%E5%88%B0%E4%BA%86%E7%A8%B3%E5%AE%9A%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%EF%BC%8C%E6%98%AF%E4%B8%80%E5%8A%B3%E6%B0%B8%E9%80%B8%E7%9A%84%E5%A5%BD%E6%96%B9%E6%B3%95">https://sweetyudou.github.io/2024/11/14/Docker/。简而言之，我使用clash成功为ECS服务器配置代理，并且成功做到了稳定拉取镜像，是一劳永逸的好方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<h3 id="3-基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问"><a href="#3-基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问" class="headerlink" title="3. 基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问"></a>3. 基于阿里云ECS与ACR的Python微服务镜像构建、部署与接口访问</h3><h4 id="3-1-实验目标与相关知识技能"><a href="#3-1-实验目标与相关知识技能" class="headerlink" title="3.1 实验目标与相关知识技能"></a>3.1 实验目标与相关知识技能</h4><p>•     掌握Dockerfile构建容器镜像</p>
<p>•     理解HTTP协议基本概念，掌握HTTP调试工具的使用</p>
<p>•     理解网络服务API的概念，学会HTTP RESTful API的使用</p>
<p>•     理解并掌握Python Requests</p>
<h4 id="3-2-实验步骤与对应成果展示"><a href="#3-2-实验步骤与对应成果展示" class="headerlink" title="3.2 实验步骤与对应成果展示"></a>3.2 实验步骤与对应成果展示</h4><p><a class="link" href="https://github.com/SweetYuDou/System-Middleware-and-Cloud-Virtualization/tree/main/exp_pyms_api_demo">System-Middleware-and-Cloud-Virtualization&#x2F;exp_pyms_api_demo at main · SweetYuDou&#x2F;System-Middleware-and-Cloud-Virtualization <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>​	在ACR中创建镜像仓库，以备后续的镜像上传</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866bd496fbd.png" alt="img"></p>
<p>​	启动本实验提供的微服务范例，体验HTTP RESTful API接口，本服务范例在8000端口监听，启动命令为：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./exp_pyms_api_demo ./device.csv</span><br><span class="line"><span class="comment"># ./exp_pyms_api_demo &lt;csv_file&gt;,csv_file为存储设备信息的CSV文件路径。若该路径中存在CSV文件则读取信息，否则自动创建5条设备信息并生成CSV文件</span></span><br></pre></td></tr></table></figure></div>

<p>​	此时访问<code>http://&lt;IP&gt;:8000/docs</code>将会看到以下页面：</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866aeab506c.png" alt="image-20250114213605484"></p>
<p>​	此时当前目录创建<code>device.csv</code>文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -F  <span class="comment">#查看是否创建device.csv文件</span></span><br></pre></td></tr></table></figure></div>

<p>​	<code>Ctrl + C</code>退出程序后，创建Dockerfile文件</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Ubuntu 22.04 作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;&lt;yud0u@qq.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作目录为 /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="comment">#将主机文件系统中的 exp_pyms_api_demo 复制到镜像中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> exp_pyms_api_demo exp_pyms_api_demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露服务端口 8000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器的启动命令，devcie.csv 将存储在容器的/var/lib/exp_pyms_data/ 目录下，因此该目录应持久化</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/app/exp_pyms_api_demo&quot;</span>, <span class="string">&quot;/var/lib/exp_pyms_data/device.csv&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用<code>docker build</code>命令构建容器镜像，镜像名为<code>exp_pyms_api_demo:1.0</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t exp_pyms_api_demo:1.0 .</span><br><span class="line">docker images  <span class="comment">#查看镜像是否构建成功</span></span><br></pre></td></tr></table></figure></div>

<p>​	将镜像上传至ACR镜像仓库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker login --username=鱼豆YuDou crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com</span><br><span class="line">docker tag [ImageId] crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:[镜像版本号]</span><br><span class="line">docker push crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	推送成功后，可在镜像仓库exp_pyms_api_demo的页面中查看刚刚推送的镜像</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866aedac18f.gif" alt="img"></p>
<p>​	远程登录ECS并拉取镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:[镜像版本号]</span><br></pre></td></tr></table></figure></div>

<p>​	在ECS工作目录创建持久化目录exp_pyms_data，用于存储容器内服务生成的业务数据文档，即设备信息数据，随后运行该镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> exp_pyms_data</span><br><span class="line">docker run -d --restart=always\</span><br><span class="line">            --name exp_pyms_api_demo \</span><br><span class="line">            -v ./exp_pyms_data/:/var/lib/exp_pyms_data/ \</span><br><span class="line">            -p 8000:8000 \</span><br><span class="line">            crpi-n4sctgr4gzd05xye.cn-hangzhou.personal.cr.aliyuncs.com/exp_yd/exp_pyms_api_demo:1.0</span><br></pre></td></tr></table></figure></div>

<p>​	使用docker logs查看服务是否成功启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs exp_pyms_api_demo  </span><br><span class="line"><span class="built_in">ls</span> exp_pyms_data/  <span class="comment">#若有device.csv文件，则成功创建5条设备信息且服务成功运行</span></span><br></pre></td></tr></table></figure></div>

<p>​	使用OpenAPI查看微服务接口，在浏览器中通过<code>&lt;ecs_ip&gt;:8000/docs</code>来访问<code>Redocly</code>文档地址</p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866ae867e7a.jpg" alt="img"></p>
<p>​	同理，本实验Swagger文档地址为<code>&lt;ecs_ip&gt;:8000/docs/swagger</code></p>
<p><img lazyload src="/images/loading.svg" data-src="https://www.helloimg.com/i/2025/01/14/67866ae9278db.jpg" alt="img"></p>
<p>​	配置Python虚拟环境<code>exp_venv</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m venv exp_venv</span><br><span class="line"><span class="built_in">source</span> exp_venv/bin/activate</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure></div>

<p>​	进入Python交互式界面进行初步验证</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">import requests  <span class="comment">#验证requests库是否可导入</span></span><br><span class="line">requests.__version__  <span class="comment">#查看requests版本</span></span><br><span class="line"><span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure></div>

<p>​	查看先前生成的device.csv文件内容，通过Requests库访问接口来获取设备信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv</span><br><span class="line">python3</span><br><span class="line">import requests</span><br><span class="line">resp = requests.get(<span class="string">&quot;http://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>,json=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;6713124465&quot;</span>&#125;)  <span class="comment">#通过id来检索设备并获取信息，该id为随机生成的例子</span></span><br><span class="line">resp</span><br><span class="line">resp.status_code  <span class="comment">#查看状态码判断访问是否成功，访问成功的HTTP状态码为200</span></span><br><span class="line">resp.text</span><br><span class="line">resp.json()</span><br></pre></td></tr></table></figure></div>

<p>​	同时还支持用“序号SN-类型”来检索设备</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.get(<span class="string">&quot;http://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>, json=&#123;<span class="string">&quot;sn&quot;</span>: <span class="string">&quot;XRmiI&quot;</span>, <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Raspberry Pi 4&quot;</span>&#125;)  <span class="comment">#该组合信息为随机生成的例子</span></span><br><span class="line">resp.status_code</span><br><span class="line">resp.json()</span><br></pre></td></tr></table></figure></div>

<p>​	体验删除接口</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.delete(<span class="string">&quot;http://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>, json=&#123;<span class="string">&quot;ids&quot;</span>:[<span class="string">&quot;3116641919&quot;</span>, <span class="string">&quot;94791787847&quot;</span>, <span class="string">&quot;1234567890&quot;</span>]&#125;)</span><br><span class="line">resp.json()</span><br><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv  <span class="comment">#查看设备信息是否被删除</span></span><br></pre></td></tr></table></figure></div>

<p>​	体验添加设备接口</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.post(</span><br><span class="line">    <span class="string">&quot;htpp://&lt;ecs_ip&gt;:8000/v1/devices&quot;</span>,</span><br><span class="line">    json=&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test-name&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;controller&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hardware&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;model&quot;</span>: <span class="string">&quot;test-model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sn&quot;</span>: <span class="string">&quot;test-sn&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;last_update&quot;</span>: <span class="string">&quot;2023-08-06 20:00:00&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;nic&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;wifi&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;mac&quot;</span>: <span class="string">&quot;12:34:56:78:9a:bc&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;ipv4&quot;</span>: <span class="string">&quot;192.168.1.2&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;online&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">resp.json()</span><br><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv  <span class="comment">#查看设备信息是否成功添加</span></span><br></pre></td></tr></table></figure></div>

<p>​	体验更新设备信息接口</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">resp = requests.put(</span><br><span class="line">    <span class="string">&quot;http://127.0.0.1:8000/v1/devices&quot;</span>,</span><br><span class="line">    json=&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;0922282528&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;new-name&quot;</span>,</span><br><span class="line">        <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_update&quot;</span>: <span class="string">&quot;2023-08-06 10:00:00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;offline&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">resp.json()</span><br><span class="line"><span class="built_in">cat</span> exp_pyms_data/device.csv  <span class="comment">#查看是否成功更新设备信息</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3-3-遇到的主要问题、解决思路和收获"><a href="#3-3-遇到的主要问题、解决思路和收获" class="headerlink" title="3.3 遇到的主要问题、解决思路和收获"></a>3.3 遇到的主要问题、解决思路和收获</h4><p>​	该实验暂未遇到问题</p>
]]></content>
      <categories>
        <category>software-engineering</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Maven</tag>
        <tag>Spring Boot</tag>
        <tag>阿里云</tag>
        <tag>Serverless</tag>
        <tag>Nacos</tag>
        <tag>Git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
